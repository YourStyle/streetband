2022-03-08 13:32:12.533 | INFO     | database:__init__:17 - Redis start
2022-03-08 13:32:12.538 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 13:32:12,554] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 13:32:12,615] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 13:34:01,845] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-11' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 13:41:53,924] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-40' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("60ae219b-3b1b-472a-8524-2a7147763b2b") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 13:43:13.588 | INFO     | database:__init__:17 - Redis start
2022-03-08 13:43:13.594 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 13:43:13,600] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 13:43:13,661] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 13:43:35,539] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1307, in _retryable_read
    with self._secondaryok_for_server(read_pref, server, session) as (
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1162, in _secondaryok_for_server
    with self._get_socket(server, session) as sock_info:
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1099, in _get_socket
    with server.get_socket(
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1371, in get_socket
    sock_info = self._get_socket(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1483, in _get_socket
    sock_info = self.connect(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1337, in connect
    sock_info.check_auth(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 814, in check_auth
    self.authenticate(credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 831, in authenticate
    auth.authenticate(credentials, self)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 548, in authenticate
    auth_func(credentials, sock_info)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 469, in _authenticate_default
    return _authenticate_scram(credentials, sock_info, 'SCRAM-SHA-1')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 205, in _authenticate_scram
    res = sock_info.command(source, cmd)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 719, in command
    return command(self, dbname, spec, secondary_ok,
  File "/usr/local/lib/python3.8/dist-packages/pymongo/network.py", line 158, in command
    helpers._check_command_response(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}
dispatcher.py:390 #ERROR    [2022-03-08 13:56:08,640] - aiogram.dispatcher.dispatcher - Cause exception while getting updates.
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 381, in start_polling
    updates = await self.bot.get_updates(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 110, in get_updates
    result = await self.request(api.Methods.GET_UPDATES, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 119, in check_result
    exceptions.ConflictError.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.TerminatedByOtherGetUpdates: Terminated by other getupdates request; make sure that only one bot instance is running
dispatcher.py:390 #ERROR    [2022-03-08 13:56:18,903] - aiogram.dispatcher.dispatcher - Cause exception while getting updates.
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 381, in start_polling
    updates = await self.bot.get_updates(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 110, in get_updates
    result = await self.request(api.Methods.GET_UPDATES, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 119, in check_result
    exceptions.ConflictError.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.TerminatedByOtherGetUpdates: Terminated by other getupdates request; make sure that only one bot instance is running
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 36
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63")
                                                                                     ^
SyntaxError: EOL while scanning string literal
2022-03-08 14:03:51.172 | INFO     | database:__init__:17 - Redis start
2022-03-08 14:03:51.176 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 14:03:51,188] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 14:03:51,244] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 14:03:51,348] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1307, in _retryable_read
    with self._secondaryok_for_server(read_pref, server, session) as (
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1162, in _secondaryok_for_server
    with self._get_socket(server, session) as sock_info:
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1099, in _get_socket
    with server.get_socket(
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1371, in get_socket
    sock_info = self._get_socket(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1483, in _get_socket
    sock_info = self.connect(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1337, in connect
    sock_info.check_auth(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 814, in check_auth
    self.authenticate(credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 831, in authenticate
    auth.authenticate(credentials, self)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 548, in authenticate
    auth_func(credentials, sock_info)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 467, in _authenticate_default
    return _authenticate_scram(credentials, sock_info, 'SCRAM-SHA-256')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 243, in _authenticate_scram
    res = sock_info.command(source, cmd)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 719, in command
    return command(self, dbname, spec, secondary_ok,
  File "/usr/local/lib/python3.8/dist-packages/pymongo/network.py", line 158, in command
    helpers._check_command_response(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}
base_events.py:1707 #ERROR    [2022-03-08 14:04:21,218] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-19' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1307, in _retryable_read
    with self._secondaryok_for_server(read_pref, server, session) as (
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1162, in _secondaryok_for_server
    with self._get_socket(server, session) as sock_info:
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1099, in _get_socket
    with server.get_socket(
  File "/usr/lib/python3.8/contextlib.py", line 113, in __enter__
    return next(self.gen)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1371, in get_socket
    sock_info = self._get_socket(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1483, in _get_socket
    sock_info = self.connect(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 1337, in connect
    sock_info.check_auth(all_credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 814, in check_auth
    self.authenticate(credentials)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 831, in authenticate
    auth.authenticate(credentials, self)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 548, in authenticate
    auth_func(credentials, sock_info)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 467, in _authenticate_default
    return _authenticate_scram(credentials, sock_info, 'SCRAM-SHA-256')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/auth.py", line 243, in _authenticate_scram
    res = sock_info.command(source, cmd)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 719, in command
    return command(self, dbname, spec, secondary_ok,
  File "/usr/local/lib/python3.8/dist-packages/pymongo/network.py", line 158, in command
    helpers._check_command_response(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: Authentication failed., full error: {'ok': 0.0, 'errmsg': 'Authentication failed.', 'code': 18, 'codeName': 'AuthenticationFailed'}
2022-03-08 14:06:54.776 | INFO     | database:__init__:17 - Redis start
2022-03-08 14:06:54.782 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 14:06:54,789] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 14:06:54,845] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 14:06:57,851] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 14:09:23,188] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-30' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 14:09:54,075] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-36' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Admin to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("fb2da116-3abe-4863-b20f-fec0e2c70f81") }, $db: "Admin", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 14:10:31.285 | INFO     | database:__init__:17 - Redis start
2022-03-08 14:10:31.290 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 14:10:31,300] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 14:10:31,358] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 14:10:42,793] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("3bc99bb9-a5f8-4a60-b3ca-918bdc92214a") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("3bc99bb9-a5f8-4a60-b3ca-918bdc92214a") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("3bc99bb9-a5f8-4a60-b3ca-918bdc92214a") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("3bc99bb9-a5f8-4a60-b3ca-918bdc92214a") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 14:33:19.363 | INFO     | database:__init__:17 - Redis start
2022-03-08 14:33:19.366 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 14:33:19,373] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 14:33:19,424] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 14:33:29,396] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 14:45:20.335 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:22.869 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:24.385 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:26.899 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:29.369 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:31.934 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:33.407 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:35.998 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:38.565 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:41.025 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:43.584 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:46.233 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:48.758 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:50.341 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:52.858 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:55.366 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:56.862 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:45:59.417 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:02.037 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:04.693 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:07.281 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:09.922 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:12.579 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:15.122 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:16.567 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:19.035 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:21.479 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:23.045 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:25.569 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:28.027 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:30.631 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:33.166 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:35.643 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:38.244 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:40.963 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:43.603 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:46.242 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:48.893 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:50.526 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:53.092 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:46:56.575 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', authenticationDatabase='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option authenticationDatabase
2022-03-08 14:49:00.370 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', databaseName='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option databaseName
2022-03-08 14:49:01.911 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', databaseName='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option databaseName
2022-03-08 14:49:04.530 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', databaseName='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option databaseName
2022-03-08 14:49:08.188 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient(username='Admin', password='PasswordForMongo63', databaseName='admin')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option databaseName
2022-03-08 14:59:56.785 | INFO     | database:__init__:17 - Redis start
2022-03-08 14:59:56.789 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 14:59:56,801] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 14:59:56,910] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 14:59:57,054] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 14:59:59,704] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-16' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 15:00:05,281] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-21' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 15:25:47,956] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-102' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 15:25:50,183] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-107' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure("command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: command find requires authentication, full error: {'ok': 0.0, 'errmsg': 'command find requires authentication', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 16:43:57.860 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient("localhost", username='Admin', password='PasswordForMongo63', auth_source='admin', authMechanism='SCRAM-SHA-256')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option auth_source
2022-03-08 16:43:59.480 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient("localhost", username='Admin', password='PasswordForMongo63', auth_source='admin', authMechanism='SCRAM-SHA-256')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option auth_source
2022-03-08 16:44:02.025 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient("localhost", username='Admin', password='PasswordForMongo63', auth_source='admin', authMechanism='SCRAM-SHA-256')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option auth_source
2022-03-08 16:44:05.442 | INFO     | database:__init__:17 - Redis start
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 176, in <module>
    database = Database("Street")
  File "/root/streetband/database.py", line 36, in __init__
    self.client = pymongo.MongoClient("localhost", username='Admin', password='PasswordForMongo63', auth_source='admin', authMechanism='SCRAM-SHA-256')
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in __init__
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 706, in <genexpr>
    keyword_opts = common._CaseInsensitiveDictionary(dict(common.validate(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 740, in validate
    value = validator(option, value)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/common.py", line 144, in raise_config_error
    raise ConfigurationError("Unknown option %s" % (key,))
pymongo.errors.ConfigurationError: Unknown option auth_source
2022-03-08 16:50:45.515 | INFO     | database:__init__:17 - Redis start
2022-03-08 16:50:45.518 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 16:50:45,525] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 16:50:45,590] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 16:50:46,207] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-08 16:50:53,153] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-15' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("24bbe899-d988-4628-9b4c-95f9573bff9c") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 16:57:12.117 | INFO     | database:__init__:17 - Redis start
2022-03-08 16:57:12.121 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 16:57:12,129] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 16:57:12,216] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 16:57:13,491] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("36a7fd30-10a4-4222-b2f5-c4b2fe52807f") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("36a7fd30-10a4-4222-b2f5-c4b2fe52807f") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("36a7fd30-10a4-4222-b2f5-c4b2fe52807f") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("36a7fd30-10a4-4222-b2f5-c4b2fe52807f") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-08 17:50:48.169 | INFO     | database:__init__:17 - Redis start
2022-03-08 17:50:48.179 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 17:50:48,194] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 17:50:48,299] - aiogram.dispatcher.dispatcher - Start polling.
2022-03-08 17:56:50.440 | INFO     | database:__init__:17 - Redis start
2022-03-08 17:56:50.444 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-08 17:56:50,450] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-08 17:56:50,572] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-08 17:59:36,292] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-26' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("79fb4a97-9b68-4d33-bbae-b37dc0c424ba") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("79fb4a97-9b68-4d33-bbae-b37dc0c424ba") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("79fb4a97-9b68-4d33-bbae-b37dc0c424ba") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("79fb4a97-9b68-4d33-bbae-b37dc0c424ba") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
base_events.py:1707 #ERROR    [2022-03-09 11:30:19,690] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3198' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=OperationFailure('not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("6f8049d3-b5f2-4b2c-a389-f54d8236d200") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {\'ok\': 0.0, \'errmsg\': \'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("6f8049d3-b5f2-4b2c-a389-f54d8236d200") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }\', \'code\': 13, \'codeName\': \'Unauthorized\'}')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/start_handlers.py", line 40, in start_normal
    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
  File "/root/streetband/database.py", line 43, in user_exists
    return not (self.users.find_one({"user_id": user_id}) is None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 1114, in find_one
    for result in cursor.limit(-1):
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1159, in next
    if len(self.__data) or self._refresh():
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 1080, in _refresh
    self.__send_message(q)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/cursor.py", line 971, in __send_message
    response = client._run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1215, in _run_operation
    return self._retryable_read(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1313, in _retryable_read
    return func(session, server, sock_info, secondary_ok)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1211, in _cmd
    return server.run_operation(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/server.py", line 129, in run_operation
    _check_command_response(first, sock_info.max_wire_version)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/helpers.py", line 170, in _check_command_response
    raise OperationFailure(errmsg, code, response, max_wire_version)
pymongo.errors.OperationFailure: not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("6f8049d3-b5f2-4b2c-a389-f54d8236d200") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }, full error: {'ok': 0.0, 'errmsg': 'not authorized on Street to execute command { find: "users", filter: { user_id: "416546809" }, limit: 1, singleBatch: true, lsid: { id: UUID("6f8049d3-b5f2-4b2c-a389-f54d8236d200") }, $db: "Street", $readPreference: { mode: "primaryPreferred" } }', 'code': 13, 'codeName': 'Unauthorized'}
2022-03-10 12:20:02.114 | INFO     | database:__init__:17 - Redis start
2022-03-10 12:20:02.120 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-10 12:20:02,126] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-10 12:20:02,181] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-10 14:46:45,476] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-491' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not iterable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 22, in check
    for musician in musicians:
TypeError: 'NoneType' object is not iterable
base_events.py:1707 #ERROR    [2022-03-10 14:47:21,165] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-532' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-10 14:47:51,809] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-595' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-10 14:48:54,170] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-632' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-10 14:49:55,551] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-647' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-10 14:51:29,804] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-724' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-10 14:52:05,255] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-752' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-10 14:52:05,731] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-755' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
/usr/local/lib/python3.8/dist-packages/aiogram/types/mixins.py:40: DeprecationWarning: destination parameter is deprecated, please use destination_dir or destination_file.
  warn_deprecated(
base_events.py:1707 #ERROR    [2022-03-10 15:21:43,320] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1325' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=InvalidDocument("cannot encode object: <InputFile 'attach://C1TDzXC7gZxeonmR0VQYSw' with file='<_io.BytesIO object at 0x7f790863f8b0>'>, of type: <class 'aiogram.types.input_file.InputFile'>")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 236, in edit_pic
    db.set_group_pic(str(message.from_user.id), InputFile(pic_io))
  File "/root/streetband/database.py", line 77, in set_group_pic
    self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_pic": group_pic}})
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 828, in update_one
    self._update_retryable(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 677, in _update_retryable
    return self.__database.client._retryable_write(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1340, in _retryable_write
    return self._retry_with_session(retryable, func, s, None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1229, in _retry_with_session
    return self._retry_internal(retryable, func, session, bulk)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1261, in _retry_internal
    return func(session, sock_info, retryable)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 669, in _update
    return self._update(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 638, in _update
    result = sock_info.command(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 735, in command
    self._raise_connection_failure(error)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 719, in command
    return command(self, dbname, spec, secondary_ok,
  File "/usr/local/lib/python3.8/dist-packages/pymongo/network.py", line 118, in command
    request_id, msg, size, max_doc_size = message._op_msg(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/message.py", line 597, in _op_msg
    return _op_msg_uncompressed(
bson.errors.InvalidDocument: cannot encode object: <InputFile 'attach://C1TDzXC7gZxeonmR0VQYSw' with file='<_io.BytesIO object at 0x7f790863f8b0>'>, of type: <class 'aiogram.types.input_file.InputFile'>
base_events.py:1707 #ERROR    [2022-03-10 15:30:40,646] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1616' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:30:42,169] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1621' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:30:46,931] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1636' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:30:47,266] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1641' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:30:47,487] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1646' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:30:52,295] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1651' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:30:52,478] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1656' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:31:16,967] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1691' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:31:35,215] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1700' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:31:35,374] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1705' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:31:35,621] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1710' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:31:35,811] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1716' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:31:36,094] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1721' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:32:15,170] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1748' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 30, in get_location
    closest_musicians = choose_shortest(location)
  File "/root/streetband/app/calculate_distance.py", line 27, in choose_shortest
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 15:33:09,053] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1782' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 30, in get_location
    closest_musicians = choose_shortest(location)
  File "/root/streetband/app/calculate_distance.py", line 27, in choose_shortest
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 15:34:57,858] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1850' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 93, in rephresh_nearby_groups
    closest_musicians = choose_shortest(location)
  File "/root/streetband/app/calculate_distance.py", line 27, in choose_shortest
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 15:35:27,980] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-1934' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:38:42,961] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2019' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 30, in get_location
    closest_musicians = choose_shortest(location)
  File "/root/streetband/app/calculate_distance.py", line 27, in choose_shortest
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 15:40:35,367] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2058' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 30, in get_location
    closest_musicians = choose_shortest(location)
  File "/root/streetband/app/calculate_distance.py", line 27, in choose_shortest
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 19, 12, 100000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 15:41:37,731] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2096' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:41:52,473] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2101' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:41:53,264] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2107' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
/usr/local/lib/python3.8/dist-packages/aiogram/types/mixins.py:40: DeprecationWarning: destination parameter is deprecated, please use destination_dir or destination_file.
  warn_deprecated(
base_events.py:1707 #ERROR    [2022-03-10 15:45:14,288] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2126' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=InvalidDocument("cannot encode object: <InputFile 'attach://3OIkilSmMXi7YX0snIj-Jg' with file='<_io.BytesIO object at 0x7f790866b810>'>, of type: <class 'aiogram.types.input_file.InputFile'>")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 236, in edit_pic
    db.set_group_pic(str(message.from_user.id), InputFile(pic_io))
  File "/root/streetband/database.py", line 77, in set_group_pic
    self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_pic": group_pic}})
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 828, in update_one
    self._update_retryable(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 677, in _update_retryable
    return self.__database.client._retryable_write(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1340, in _retryable_write
    return self._retry_with_session(retryable, func, s, None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1229, in _retry_with_session
    return self._retry_internal(retryable, func, session, bulk)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1261, in _retry_internal
    return func(session, sock_info, retryable)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 669, in _update
    return self._update(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 638, in _update
    result = sock_info.command(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 735, in command
    self._raise_connection_failure(error)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 719, in command
    return command(self, dbname, spec, secondary_ok,
  File "/usr/local/lib/python3.8/dist-packages/pymongo/network.py", line 118, in command
    request_id, msg, size, max_doc_size = message._op_msg(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/message.py", line 597, in _op_msg
    return _op_msg_uncompressed(
bson.errors.InvalidDocument: cannot encode object: <InputFile 'attach://3OIkilSmMXi7YX0snIj-Jg' with file='<_io.BytesIO object at 0x7f790866b810>'>, of type: <class 'aiogram.types.input_file.InputFile'>
/usr/local/lib/python3.8/dist-packages/aiogram/types/mixins.py:40: DeprecationWarning: destination parameter is deprecated, please use destination_dir or destination_file.
  warn_deprecated(
base_events.py:1707 #ERROR    [2022-03-10 15:45:22,191] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2131' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=InvalidDocument("cannot encode object: <InputFile 'attach://lJzTOJDiIiTOljGlm0iaXw' with file='<_io.BytesIO object at 0x7f79080d0db0>'>, of type: <class 'aiogram.types.input_file.InputFile'>")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 236, in edit_pic
    db.set_group_pic(str(message.from_user.id), InputFile(pic_io))
  File "/root/streetband/database.py", line 77, in set_group_pic
    self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_pic": group_pic}})
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 828, in update_one
    self._update_retryable(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 677, in _update_retryable
    return self.__database.client._retryable_write(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1340, in _retryable_write
    return self._retry_with_session(retryable, func, s, None)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1229, in _retry_with_session
    return self._retry_internal(retryable, func, session, bulk)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/mongo_client.py", line 1261, in _retry_internal
    return func(session, sock_info, retryable)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 669, in _update
    return self._update(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/collection.py", line 638, in _update
    result = sock_info.command(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 735, in command
    self._raise_connection_failure(error)
  File "/usr/local/lib/python3.8/dist-packages/pymongo/pool.py", line 719, in command
    return command(self, dbname, spec, secondary_ok,
  File "/usr/local/lib/python3.8/dist-packages/pymongo/network.py", line 118, in command
    request_id, msg, size, max_doc_size = message._op_msg(
  File "/usr/local/lib/python3.8/dist-packages/pymongo/message.py", line 597, in _op_msg
    return _op_msg_uncompressed(
bson.errors.InvalidDocument: cannot encode object: <InputFile 'attach://lJzTOJDiIiTOljGlm0iaXw' with file='<_io.BytesIO object at 0x7f79080d0db0>'>, of type: <class 'aiogram.types.input_file.InputFile'>
base_events.py:1707 #ERROR    [2022-03-10 15:50:28,091] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2466' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:50:51,871] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2531' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:12,351] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2617' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:13,695] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2622' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:14,223] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2628' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:14,389] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2633' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:14,611] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2638' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:18,925] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2643' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:54:19,160] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2648' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:58:51,417] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2709' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:58:51,903] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2714' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:59:41,922] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2721' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:59:42,295] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2726' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 177, in set_edit_name
    await call.message.answer((current_name + msg.edit_name))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 15:59:42,699] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2731' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=MessageIsTooLong('Message is too long')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 283, in process_update
    return await self.callback_query_handlers.notify(update.callback_query)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 193, in set_edit_desc
    await call.message.answer(current_desc + msg.edit_desc)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/types/message.py", line 368, in answer
    return await self.bot.send_message(
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/bot.py", line 334, in send_message
    result = await self.request(api.Methods.SEND_MESSAGE, payload)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/base.py", line 231, in request
    return await api.make_request(await self.get_session(), self.server, self.__token, method, data, files,
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 140, in make_request
    return check_result(method, response.content_type, response.status, await response.text())
  File "/usr/local/lib/python3.8/dist-packages/aiogram/bot/api.py", line 115, in check_result
    exceptions.BadRequest.detect(description)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/utils/exceptions.py", line 140, in detect
    raise err(cls.text or description)
aiogram.utils.exceptions.MessageIsTooLong: Message is too long
base_events.py:1707 #ERROR    [2022-03-10 16:52:25,000] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2926' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 20, in check
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:53:00,834] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2930' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:53:31,559] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2934' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:54:02,305] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2938' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:54:33,277] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2942' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:55:03,954] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2946' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:55:34,501] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2950' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:56:05,200] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2954' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:56:36,025] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2958' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:57:06,983] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2962' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:58:07,478] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2968' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:58:38,529] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2972' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:59:05,908] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2980' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:59:06,510] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2983' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 20, in check
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:59:26,729] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2987' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 16:59:57,538] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2991' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:00:28,596] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2995' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:00:59,146] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-2999' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:01:29,789] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3003' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:02:31,114] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3009' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:03:31,785] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3015' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:04:02,377] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3019' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:04:32,979] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3023' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:05:34,005] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3029' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:06:04,859] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3033' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:07:05,750] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3039' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:10:18,186] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3055' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 20, in check
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    cache.jset("musicians", buffer)
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:18:18,401] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3086' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 20, in check
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:24:27,284] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3107' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 20, in check
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:24:34,353] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3115' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:24:34,976] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3118' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:24:40,522] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3125' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 20, in check
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:25:16,351] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3129' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:25:47,127] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3133' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:26:17,967] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3137' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:26:48,988] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3141' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
base_events.py:1707 #ERROR    [2022-03-10 17:27:19,449] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-3145' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError('datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 82, in rephresh_nearby_groups
    db.get_musicians()
  File "/root/streetband/database.py", line 102, in get_musicians
    if cache.jget("musicians") != buffer:
  File "/root/streetband/database.py", line 21, in jset
    return self.setex(name, ex, ujson.dumps(value))
TypeError: datetime.datetime(2022, 3, 10, 15, 49, 9, 495000) is not JSON serializable
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
Traceback (most recent call last):
  File "main.py", line 8, in <module>
    from app.button_handlers import use_buttons
  File "/root/streetband/app/button_handlers.py", line 7, in <module>
    from app import service as s
  File "/root/streetband/app/service.py", line 13, in <module>
    from database import cache, database
  File "/root/streetband/database.py", line 101
    print(buffer)
                ^
TabError: inconsistent use of tabs and spaces in indentation
2022-03-10 17:42:56.153 | INFO     | database:__init__:17 - Redis start
2022-03-10 17:42:56.158 | INFO     | database:__init__:38 - Database connection established
main.py:52 #INFO     [2022-03-10 17:42:56,165] - __main__ - Starting bot
dispatcher.py:358 #INFO     [2022-03-10 17:42:56,235] - aiogram.dispatcher.dispatcher - Start polling.
base_events.py:1707 #ERROR    [2022-03-10 17:42:56,255] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-6' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=ConnectionError('Too many connections')>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/builtin.py", line 543, in check
    state = self.ctx_state.get()
LookupError: <ContextVar name='user_state' at 0x7f4f115c8900>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aioredis/connection.py", line 1409, in get_connection
    connection = self._available_connections.pop()
IndexError: pop from empty list

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/builtin.py", line 548, in check
    state = await self.dispatcher.storage.get_state(chat=chat, user=user)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/contrib/fsm_storage/redis.py", line 439, in get_state
    return await redis.get(key) or self.resolve_state(default)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/contrib/fsm_storage/redis.py", line 265, in get
    return await self._redis.get(name, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aioredis/client.py", line 1082, in execute_command
    conn = self.connection or await pool.get_connection(command_name, **options)
  File "/usr/local/lib/python3.8/dist-packages/aioredis/connection.py", line 1411, in get_connection
    connection = self.make_connection()
  File "/usr/local/lib/python3.8/dist-packages/aioredis/connection.py", line 1449, in make_connection
    raise ConnectionError("Too many connections")
aioredis.exceptions.ConnectionError: Too many connections
base_events.py:1707 #ERROR    [2022-03-12 09:06:56,805] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7271' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 92, in return_fav
    fav_groups = db.get_user(str(message.from_user.id))["fav_groups"]
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-12 09:06:59,610] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7274' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/genres_handlers.py", line 24, in get_config
    reply_markup=s.genres_kb(database.get_user(str(message.from_user.id))["fav_genres"])
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-12 09:07:08,433] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7284' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/genres_handlers.py", line 24, in get_config
    reply_markup=s.genres_kb(database.get_user(str(message.from_user.id))["fav_genres"])
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-12 09:07:08,632] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7287' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 92, in return_fav
    fav_groups = db.get_user(str(message.from_user.id))["fav_groups"]
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-12 09:08:02,338] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7296' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not iterable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 22, in check
    for musician in musicians:
TypeError: 'NoneType' object is not iterable
base_events.py:1707 #ERROR    [2022-03-12 09:08:08,029] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7299' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-12 09:09:01,452] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-7347' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 261, in process_update
    return await self.edited_message_handlers.notify(update.edited_message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/streets_handlers.py", line 83, in rephresh_nearby_groups
    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"],
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-13 17:00:41,901] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-13157' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not iterable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 107, in notify
    data.update(await check_filters(handler_obj.filters, args))
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 72, in check_filters
    f = await execute_filter(filter_, args)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 56, in execute_filter
    return await filter_.filter(*args, **filter_.kwargs)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/filters/filters.py", line 161, in __call__
    return await self.check(*args)
  File "/root/streetband/app/musician.py", line 22, in check
    for musician in musicians:
TypeError: 'NoneType' object is not iterable
base_events.py:1707 #ERROR    [2022-03-14 18:42:26,170] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-17937' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/genres_handlers.py", line 24, in get_config
    reply_markup=s.genres_kb(database.get_user(str(message.from_user.id))["fav_genres"])
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-14 18:42:30,286] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-17944' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/button_handlers.py", line 92, in return_fav
    fav_groups = db.get_user(str(message.from_user.id))["fav_groups"]
TypeError: 'NoneType' object is not subscriptable
base_events.py:1707 #ERROR    [2022-03-14 18:42:33,229] - asyncio - Task exception was never retrieved
future: <Task finished name='Task-17951' coro=<Dispatcher._process_polling_updates() done, defined at /usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py:407> exception=TypeError("'NoneType' object is not subscriptable")>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 415, in _process_polling_updates
    for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 235, in process_updates
    return await asyncio.gather(*tasks)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/dispatcher.py", line 256, in process_update
    return await self.message_handlers.notify(update.message)
  File "/usr/local/lib/python3.8/dist-packages/aiogram/dispatcher/handler.py", line 116, in notify
    response = await handler_obj.handler(*args, **partial_data)
  File "/root/streetband/app/genres_handlers.py", line 24, in get_config
    reply_markup=s.genres_kb(database.get_user(str(message.from_user.id))["fav_genres"])
TypeError: 'NoneType' object is not subscriptable
