import asyncio
from aiogram import Dispatcher, types
from aiogram.dispatcher import filters, FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, InputMediaAudio
from io import BytesIO
from gadgets import service as s
from gadgets.callback_datas import info_callback, add_callback, fav_callback, delete_callback, songs_callback
from gadgets.dialogs import msg
from gadgets.service import create_group_action_kb
from gadgets.states import EditingProfile

from database import database as db, cache
from scripts.bad_chars import check_chars


async def open_profile(message: types.Message):
    await message.answer(text="–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=s.MAIN_KB)


async def group_info(call: CallbackQuery, callback_data: dict):
    await call.answer()
    groups = cache.jget("musicians")
    group = groups[int(callback_data["db_number"])]
    group_id = group["musician_id"]
    group_name = group["musician_name"]
    group_picture = group["group_pic"]
    genres = await s.get_genres_names(group["group_genre"], False)
    group_description = group["group_description"]
    group_leader = group["group_leader"]
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group_name} \n–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã: {group_leader}\n–ñ–∞–Ω—Ä: {genres}\n–û–ø–∏—Å–∞–Ω–∏–µ :{group_description}"

    '''–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'''
    fav_groups = db.get_user(str(call.from_user.id))["fav_groups"]
    if cache.jget("musicians") is None:
        db.get_musicians()
    groups = cache.jget("musicians")
    print(fav_groups)
    flag = False
    if fav_groups:
        for group in fav_groups:
            for info in groups:
                if info["musician_id"] == group:
                    flag = True
    await call.message.answer_photo(group_picture, caption,
                                    reply_markup=create_group_action_kb(group_id, callback_data["db_number"], fav=flag))


async def add_to_favourite(call: CallbackQuery, callback_data: dict):
    await call.answer()
    db.to_fav(str(call.from_user.id), callback_data["id"])
    if callback_data["id"] in db.get_user(str(call.from_user.id))["fav_groups"]:
        fav = True
    else:
        fav = False
    print(callback_data["db_number"])
    await call.message.edit_reply_markup(
        s.create_group_action_kb(callback_data["id"], callback_data["db_number"], fav=fav))
    temp = await call.message.answer(text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    await asyncio.sleep(2)
    await temp.delete()


async def donate(call: CallbackQuery):
    await call.answer()
    await call.message.answer(text="–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –ø–ª–∞—Ç—ë–∂")


async def set_mus_location(message: types.Message, state: FSMContext):
    await state.reset_state()
    print("?")
    db.set_group_current_location(str(message.from_user.id), dict(message.location))
    await message.answer(text="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


async def answer_qr(message: types.Message, state: FSMContext):
    await state.reset_state()
    bio = BytesIO()
    mus_id = str(message.from_user.id)
    bio.name = f'logo_{mus_id}.png'
    image = s.create_qr(mus_id)
    image.save(bio, 'PNG')
    bio.seek(0)
    await message.answer_photo(bio)
    bio = BytesIO()
    bio.name = f'logo_{mus_id}.png'
    image = s.create_qr(mus_id)
    image.save(bio, 'PNG')
    bio.seek(0)
    await message.answer_document(bio)


async def return_fav(message: types.Message, state: FSMContext):
    await state.reset_state()
    fav_kb = InlineKeyboardMarkup()
    fav_groups = db.get_user(str(message.from_user.id))["fav_groups"]
    if cache.jget("musicians") is None:
        db.get_musicians()
    groups = cache.jget("musicians")
    if fav_groups:
        for group in fav_groups:
            for info in groups:
                if info["musician_id"] == group:
                    fav_kb.row(InlineKeyboardButton(text=info["musician_name"],
                                                    callback_data=fav_callback.new(id=info["musician_id"])))
        fav_kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        await message.answer(text="–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", reply_markup=fav_kb)
    else:
        # fav_kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        await message.answer(
            text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π üò≠ \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ú—É–∑—ã–∫–∞–Ω—Ç—ã —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üòç")


async def back_form_fav(call: CallbackQuery):
    await call.answer()
    await call.message.answer("–ú–µ–Ω—é", reply_markup=s.MAIN_KB)


async def fav_group_info(call: CallbackQuery, callback_data: dict):
    await call.answer()
    if cache.jget("musicians") is None:
        db.get_musicians()
    groups = cache.jget("musicians")
    for info in groups:
        if info["musician_id"] == callback_data["id"]:
            group = info
    group_id = group["musician_id"]
    group_name = group["musician_name"]
    group_picture = group["group_pic"]
    genres = await s.get_genres_names(group["group_genre"], False)
    group_description = group["group_description"]
    group_leader = group["group_leader"]
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group_name} \n–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã: {group_leader}\n–ñ–∞–Ω—Ä: {genres}\n–û–ø–∏—Å–∞–Ω–∏–µ :{group_description}"

    await call.message.answer_photo(group_picture, caption, protect_content=True,
                                    reply_markup=create_group_action_kb(group_id, callback_data["id"], fav=True,
                                                                        location=False))


async def delete_from_fav(call: CallbackQuery, callback_data: dict):
    await call.answer()
    # print(callback_data)
    await call.message.edit_reply_markup(create_group_action_kb(callback_data["id"], callback_data["id"], fav=False,
                                                                location=False))
    temp = await call.message.answer(text="–ú—É–∑—ã–∫–∞–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    db.from_fav(str(call.from_user.id), callback_data["id"])
    await asyncio.sleep(2)
    await temp.delete()


async def return_fav_groups(call: CallbackQuery):
    await call.answer()
    fav_kb = InlineKeyboardMarkup()
    fav_groups = db.get_user(str(call.from_user.id))["fav_groups"]
    if cache.jget("musicians") is None:
        db.get_musicians()
    groups = cache.jget("musicians")
    for group in fav_groups:
        for info in groups:
            if info["musician_id"] == group:
                fav_kb.row(InlineKeyboardButton(text=info["musician_name"],
                                                callback_data=fav_callback.new(id=info["musician_id"])))
    fav_kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    await call.message.answer(text="–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", reply_markup=fav_kb)


async def edit_group(message: types.Message):
    await message.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ", reply_markup=s.EDIT_PROFILE_KB)
    buffer = db.get_musician(str(message.from_user.id))
    subbuffer = {k: buffer[k] for k in
                 ('musician_id', 'musician_name', 'group_pic', 'group_genre', 'group_description', 'group_leader',
                  'current_location')}
    cache.jset(f"musician_{str(message.from_user.id)}", subbuffer)


async def set_edit_name(call: CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.answer()
    name = cache.jget(f"musician_{str(call.from_user.id)}")["musician_name"]
    current_name = "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + name + "\n"
    await call.message.answer((current_name + msg.edit_name))
    await state.set_state(EditingProfile.EditingName)


async def set_edit_pic(call: CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.answer()
    photo = cache.jget(f"musician_{str(call.from_user.id)}")["group_pic"]
    current_name = "–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: \n"
    await call.message.answer_photo(photo=photo, caption=current_name + msg.edit_pic)
    await state.set_state(EditingProfile.EditingPic)


async def set_edit_desc(call: CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.answer()
    desc = cache.jget(f"musician_{str(call.from_user.id)}")["group_description"]
    current_desc = "–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: " + desc + "\n"
    await call.message.answer(current_desc + msg.edit_desc)
    await state.set_state(EditingProfile.EditingDesc)


async def set_edit_leader(call: CallbackQuery, state: FSMContext):
    await state.reset_state()
    await call.answer()
    leader = cache.jget(f"musician_{str(call.from_user.id)}")["group_leader"]
    if call.from_user.username is None:
        current_leader = "–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä: " + leader + "\n"
    else:
        current_leader = "–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä: @" + leader + "\n"
    await call.message.answer(current_leader + msg.edit_leader)
    await state.set_state(EditingProfile.EditingLeader)


# async def set_edit_genres(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     genres_id = cache.jget(f"musician_{str(call.from_user.id)}")["group_genre"]
#     genres = await s.get_genres_names(genres_id)
#     current_genres = "–¢–µ–∫—É—â–∏–π –∂–∞–Ω—Ä—ã:\n" + genres + "\n"
#     await call.message.answer(current_genres + msg.genres)
#     await state.set_state(EditingProfile.EditingGenres)


async def edit_name(message: types.Message, state: FSMContext):
    if check_chars(message.text):
        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
        db.set_m_name(str(message.from_user.id), message.text)

        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
        info = cache.jget(f"musician_{str(message.from_user.id)}")
        info["musician_name"] = message.text
        cache.jset(f"musician_{str(message.from_user.id)}", info)

        await state.reset_state()
        await message.answer(msg.done)
    else:
        await message.answer(msg.bad_chars)


async def edit_pic(message: types.Message, state: FSMContext):
    if message.document:

        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
        pic_io = BytesIO()
        await message.document.download(destination=pic_io)
        db.set_group_pic(str(message.from_user.id), InputFile(pic_io))

        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
        info = cache.jget(f"musician_{str(message.from_user.id)}")
        info["group_pic"] = InputFile(pic_io)
        cache.jset(f"musician_{str(message.from_user.id)}", info)

    else:
        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
        pic = message.photo[-1].file_id
        db.set_group_pic(str(message.from_user.id), pic)

        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
        info = cache.jget(f"musician_{str(message.from_user.id)}")
        info["group_pic"] = pic
        cache.jset(f"musician_{str(message.from_user.id)}", info)

    await state.reset_state()
    await message.answer(msg.done)


async def edit_desc(message: types.Message, state: FSMContext):
    if check_chars(message.text):
        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
        db.set_group_description(str(message.from_user.id), message.text)

        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
        info = cache.jget(f"musician_{str(message.from_user.id)}")
        info["group_description"] = message.text
        cache.jset(f"musician_{str(message.from_user.id)}", info)

        await state.reset_state()
        await message.answer(msg.done)
    else:
        await message.answer(msg.bad_chars)


async def edit_leader(message: types.Message, state: FSMContext):
    if check_chars(message.text):
        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
        db.set_group_leader(str(message.from_user.id), message.text)

        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
        info = cache.jget(f"musician_{str(message.from_user.id)}")
        info["group_leader"] = message.text
        cache.jset(f"musician_{str(message.from_user.id)}", info)
        await state.reset_state()
        await message.answer(msg.done)
    else:
        await message.answer(msg.bad_chars)


async def songs(message: types.Message, state: FSMContext):
    '''–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞'''
    await state.reset_state()
    mus_songs = db.get_songs(str(message.from_user.id))
    if len(mus_songs) == 0:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–µ—Å–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–µ—Å–Ω—é",
                             reply_markup=s.ADD_SONG_KB)
    elif len(mus_songs) == 1:
        await message.answer_audio(mus_songs[0][1], protect_content=True)
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Å–µ–Ω", reply_markup=s.SONGS_KB)
    elif len(mus_songs) > 1:
        media = []
        for i in mus_songs:
            media.append(InputMediaAudio(i[1]))
        await message.answer_media_group(media, protect_content=True)
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Å–µ–Ω", reply_markup=s.SONGS_KB)
    # await message.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ö†Ô∏è")


async def add_song_button(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Å–Ω—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")
    # await message.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ö†Ô∏è")


async def save_song(message: types.Message):
    db.add_song(str(message.from_user.id), str(message.audio.file_id), str(message.audio.file_name.replace('.m4a', '')))
    await message.answer("–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à—É –ø–µ—Å–Ω—é !)")


async def delete_song_button(call: types.CallbackQuery):
    await call.answer()
    # await message.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ö†Ô∏è")
    all_songs = db.get_songs(str(call.from_user.id))
    songs_kb = InlineKeyboardMarkup()
    counter = 0
    for i in all_songs:
        songs_kb.row(InlineKeyboardButton(i[0], callback_data=songs_callback.new(id=counter)))
        counter += 1
    await call.message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Å–µ–Ω", reply_markup=songs_kb)


async def remove_song(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    song_id = callback_data["id"]
    all_songs = db.get_songs(str(call.from_user.id))
    await call.message.answer_audio(all_songs[int(song_id)][1], caption=f"{all_songs[int(song_id)][0]}",
                                    reply_markup=s.delete_cancel_kb(song_id))


# async def back_to_songs(call: types.CallbackQuery):
#     await call.answer()
#     # await message.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ö†Ô∏è")
#     all_songs = db.get_songs(str(call.from_user.id))
#     songs_kb = InlineKeyboardMarkup()
#     counter = 0
#     for i in all_songs:
#         songs_kb.row(InlineKeyboardButton(i[0], callback_data=songs_callback.new(id=counter)))
#         counter += 1
#     await call.message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Å–µ–Ω", reply_markup=songs_kb)


async def delet_fin(call: types.CallbackQuery):
    await call.message.answer(call.data)


async def delete_songs_button(call: types.CallbackQuery):
    await call.answer()
    # await message.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ö†Ô∏è")
    db.delete_songs(str(call.from_user.id))
    await call.message.answer("–ú—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –≤–∞—à–∏ –ø–µ—Å–Ω–∏ !")


async def whaat(message: types.Message):
    await message.answer("–õ–æ—Ö")


async def whaat_mus(message: types.Message):
    await message.answer("–ú—É–∑—ã–∫–∞–Ω—Ç")


def use_buttons(dp: Dispatcher):
    dp.register_message_handler(answer_qr, filters.Text(contains=msg.qr), state="*")
    dp.register_message_handler(set_mus_location, is_musician=True, content_types=types.ContentTypes.LOCATION,
                                state="*")
    dp.register_message_handler(return_fav, filters.Text(contains="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"), state="*")
    dp.register_message_handler(edit_group, filters.Text(contains="–ü—Ä–æ—Ñ–∏–ª—å"), state="*")

    dp.register_callback_query_handler(group_info, info_callback.filter(), state="*")

    '''–†–∞–∑–¥–µ–ª —Å –ø–µ—Å–Ω—è–º–∏'''
    dp.register_message_handler(songs, filters.Text(contains="–ü–µ—Å–Ω–∏"),
                                state="*")
    dp.register_callback_query_handler(add_song_button, lambda call: call.data and call.data == 'add_song',
                                       state="*")
    dp.register_message_handler(save_song, content_types=types.ContentTypes.AUDIO,
                                state="*")
    dp.register_callback_query_handler(delete_song_button, lambda call: call.data and call.data == 'delete_song',
                                       state="*")
    dp.register_callback_query_handler(delete_songs_button, lambda call: call.data and call.data == 'delete_all_songs',
                                       state="*")
    dp.register_callback_query_handler(remove_song, songs_callback.filter(),
                                       state="*")
    dp.register_callback_query_handler(delete_song_button, lambda call: call.data and call.data == 'back_to_songs',
                                       state="*")
    dp.register_callback_query_handler(delet_fin, lambda call: call.data.startswith('delete_song_'),
                                       state="*")

    '''–†–∞–∑–¥–µ–ª —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º'''
    dp.register_callback_query_handler(add_to_favourite, add_callback.filter(), state="*")
    dp.register_callback_query_handler(delete_from_fav, delete_callback.filter(), state="*")

    dp.register_callback_query_handler(back_form_fav, lambda call: call.data and call.data == 'back_to_menu', state="*")
    dp.register_callback_query_handler(return_fav_groups, lambda call: call.data and call.data == 'back_to_fav',
                                       state="*")

    '''–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –≥—Ä—É–ø–ø—ã'''
    dp.register_callback_query_handler(set_edit_name, lambda call: call.data and call.data == 'edit_name', state="*")
    dp.register_callback_query_handler(set_edit_desc, lambda call: call.data and call.data == 'edit_description',
                                       state="*")
    dp.register_callback_query_handler(set_edit_pic, lambda call: call.data and call.data == 'edit_picture', state="*")
    dp.register_callback_query_handler(set_edit_leader, lambda call: call.data and call.data == 'edit_leader',
                                       state="*")
    # dp.register_callback_query_handler(set_edit_genres, lambda call: call.data and call.data == 'edit_genres',
    #                                    state="*")

    dp.register_message_handler(edit_name, state=EditingProfile.EditingName)
    dp.register_message_handler(edit_desc, state=EditingProfile.EditingDesc)
    dp.register_message_handler(edit_pic, state=EditingProfile.EditingPic,
                                content_types=types.ContentTypes.PHOTO | types.ContentTypes.DOCUMENT)
    dp.register_message_handler(edit_leader, state=EditingProfile.EditingLeader)
    # dp.register_message_handler(edit_genres, state=EditingProfile.EditingGenres)

    dp.register_callback_query_handler(fav_group_info, fav_callback.filter(), state="*")

    '''–¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä'''
    # dp.register_message_handler(whaat_mus, is_musician=True, content_types=types.ContentTypes.LOCATION, state="*")
    # dp.register_message_handler(whaat, content_types=types.ContentTypes.LOCATION, state="*")
