Index: streetband/app/button_handlers.py
===================================================================
diff --git a/streetband/app/button_handlers.py b/streetband/app/button_handlers.py
deleted file mode 100644
--- a/streetband/app/button_handlers.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,382 +0,0 @@
-import asyncio
-import datetime
-from aiogram import Dispatcher, types
-from aiogram.dispatcher import filters, FSMContext
-from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
-from io import BytesIO
-from streetband.app import service as s
-from streetband.app.callback_datas import info_callback, add_callback, fav_callback, delete_callback
-from streetband.app.dialogs import msg
-from streetband.app.service import create_group_action_kb
-from streetband.app.states import EditingProfile
-
-from streetband.database import database as db, cache
-
-
-async def open_profile(message: types.Message):
-    await message.answer(text="–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=s.MAIN_KB)
-
-
-async def group_info(call: CallbackQuery, callback_data: dict):
-    await call.answer()
-    groups = cache.jget("musicians")
-    group = groups[int(callback_data["db_number"])]
-    group_id = group["musician_id"]
-    group_name = group["musician_name"]
-    group_picture = group["group_pic"]
-    genres = await s.get_genres_names(group["group_genre"], False)
-    group_description = group["group_description"]
-    group_leader = group["group_leader"]
-    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group_name} \n–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã: {group_leader}\n–ñ–∞–Ω—Ä: {genres}\n–û–ø–∏—Å–∞–Ω–∏–µ :{group_description}"
-    await call.message.answer_photo(group_picture, caption,
-                                    reply_markup=create_group_action_kb(group_id, callback_data["db_number"]))
-
-
-async def add_to_favourite(call: CallbackQuery, callback_data: dict):
-    await call.answer()
-    db.to_fav(str(call.from_user.id), callback_data["id"])
-    if callback_data["id"] in db.get_user(str(call.from_user.id))["fav_groups"]:
-        fav = True
-    else:
-        fav = False
-    print(callback_data["db_number"])
-    await call.message.edit_reply_markup(
-        s.create_group_action_kb(callback_data["id"], callback_data["db_number"], fav=fav))
-    temp = await call.message.answer(text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
-    await asyncio.sleep(2)
-    await temp.delete()
-
-
-async def donate(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer(text="–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –ø–ª–∞—Ç—ë–∂")
-
-
-async def set_mus_location(message: types.Message):
-    print("?")
-    db.set_group_current_location(str(message.from_user.id), dict(message.location))
-    await message.answer(text="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
-
-
-async def answer_qr(message: types.Message):
-    bio = BytesIO()
-    mus_id = str(message.from_user.id)
-    bio.name = f'logo_{mus_id}.png'
-    image = s.create_qr(mus_id)
-    image.save(bio, 'PNG')
-    bio.seek(0)
-    await message.answer_photo(bio)
-    bio = BytesIO()
-    bio.name = f'logo_{mus_id}.png'
-    image = s.create_qr(mus_id)
-    image.save(bio, 'PNG')
-    bio.seek(0)
-    await message.answer_document(bio)
-
-
-async def return_fav(message: types.Message):
-    fav_kb = InlineKeyboardMarkup()
-    fav_groups = db.get_user(str(message.from_user.id))["fav_groups"]
-    if cache.jget("musicians") is None:
-        db.get_musicians()
-    groups = cache.jget("musicians")
-    print(fav_groups)
-    if fav_groups:
-        for group in fav_groups:
-            for info in groups:
-                if info["musician_id"] == group:
-                    fav_kb.row(InlineKeyboardButton(text=info["musician_name"],
-                                                    callback_data=fav_callback.new(id=info["musician_id"])))
-        fav_kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
-        await message.answer(text="–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", reply_markup=fav_kb)
-    else:
-        # fav_kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
-        await message.answer(
-            text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π üò≠ \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ú—É–∑—ã–∫–∞–Ω—Ç—ã —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üòç")
-
-
-async def back_form_fav(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer("–ú–µ–Ω—é", reply_markup=s.MAIN_KB)
-
-
-async def fav_group_info(call: CallbackQuery, callback_data: dict):
-    await call.answer()
-    if cache.jget("musicians") is None:
-        db.get_musicians()
-    groups = cache.jget("musicians")
-    for info in groups:
-        if info["musician_id"] == callback_data["id"]:
-            group = info
-    group_id = group["musician_id"]
-    group_name = group["musician_name"]
-    group_picture = group["group_pic"]
-    genres = await s.get_genres_names(group["group_genre"], False)
-    group_description = group["group_description"]
-    group_leader = group["group_leader"]
-    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group_name} \n–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã: {group_leader}\n–ñ–∞–Ω—Ä: {genres}\n–û–ø–∏—Å–∞–Ω–∏–µ :{group_description}"
-    await call.message.answer_photo(group_picture, caption,
-                                    reply_markup=create_group_action_kb(group_id, callback_data["id"], fav=True,
-                                                                        location=False))
-
-
-async def delete_from_fav(call: CallbackQuery, callback_data: dict):
-    await call.answer()
-    print(callback_data)
-    await call.message.edit_reply_markup(create_group_action_kb(callback_data["id"], callback_data["id"], fav=False,
-                                                                location=False))
-    temp = await call.message.answer(text="–ú—É–∑—ã–∫–∞–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
-    db.from_fav(str(call.from_user.id), callback_data["id"])
-    await asyncio.sleep(2)
-    await temp.delete()
-
-
-async def return_fav_groups(call: CallbackQuery):
-    fav_kb = InlineKeyboardMarkup()
-    fav_groups = db.get_user(str(call.from_user.id))["fav_groups"]
-    if cache.jget("musicians") is None:
-        db.get_musicians()
-    groups = cache.jget("musicians")
-    for group in fav_groups:
-        for info in groups:
-            if info["musician_id"] == group:
-                fav_kb.row(InlineKeyboardButton(text=info["musician_name"],
-                                                callback_data=fav_callback.new(id=info["musician_id"])))
-    fav_kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
-    await call.message.answer(text="–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", reply_markup=fav_kb)
-
-
-async def edit_group(message: types.Message):
-    await message.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ", reply_markup=s.EDIT_PROFILE_KB)
-    buffer = db.get_musician(str(message.from_user.id))
-    subbuffer = {k: buffer[k] for k in
-                 ('musician_id', 'musician_name', 'group_pic', 'group_genre', 'group_description', 'group_leader',
-                  'current_location')}
-    cache.jset(f"musician_{str(message.from_user.id)}", subbuffer)
-
-
-async def set_edit_name(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    name = cache.jget(f"musician_{str(call.from_user.id)}")["musician_name"]
-    current_name = "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + name + "\n"
-    await call.message.answer((current_name + msg.edit_name))
-    await state.set_state(EditingProfile.EditingName)
-
-
-async def set_edit_pic(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    photo = cache.jget(f"musician_{str(call.from_user.id)}")["group_pic"]
-    current_name = "–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: \n"
-    await call.message.answer_photo(photo=photo, caption=current_name + msg.edit_pic)
-    await state.set_state(EditingProfile.EditingPic)
-
-
-async def set_edit_desc(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    desc = cache.jget(f"musician_{str(call.from_user.id)}")["group_description"]
-    current_desc = "–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: " + desc + "\n"
-    await call.message.answer(current_desc + msg.edit_desc)
-    await state.set_state(EditingProfile.EditingDesc)
-
-
-async def set_edit_leader(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    leader = cache.jget(f"musician_{str(call.from_user.id)}")["group_leader"]
-    if call.from_user.username is None:
-        current_leader = "–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä: " + leader + "\n"
-    else:
-        current_leader = "–¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä: @" + leader + "\n"
-    await call.message.answer(current_leader + msg.edit_leader)
-    await state.set_state(EditingProfile.EditingLeader)
-
-
-async def set_edit_genres(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    genres_id = cache.jget(f"musician_{str(call.from_user.id)}")["group_genre"]
-    genres = await s.get_genres_names(genres_id)
-    current_genres = "–¢–µ–∫—É—â–∏–π –∂–∞–Ω—Ä—ã:\n" + genres + "\n"
-    await call.message.answer(current_genres + msg.genres)
-    await state.set_state(EditingProfile.EditingGenres)
-
-
-async def edit_name(message: types.Message, state: FSMContext):
-    '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
-    db.set_m_name(str(message.from_user.id), message.text)
-
-    '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
-    info = cache.jget(f"musician_{str(message.from_user.id)}")
-    info["musician_name"] = message.text
-    cache.jset(f"musician_{str(message.from_user.id)}", info)
-
-    await state.reset_state()
-    await message.answer(msg.done)
-
-
-async def edit_pic(message: types.Message, state: FSMContext):
-    if message.document:
-
-        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
-        pic_io = BytesIO()
-        await message.document.download(destination=pic_io)
-        db.set_group_pic(str(message.from_user.id), InputFile(pic_io))
-
-        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
-        info = cache.jget(f"musician_{str(message.from_user.id)}")
-        info["group_pic"] = InputFile(pic_io)
-        cache.jset(f"musician_{str(message.from_user.id)}", info)
-
-    else:
-        '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
-        pic = message.photo[-1].file_id
-        db.set_group_pic(str(message.from_user.id), pic)
-
-        '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
-        info = cache.jget(f"musician_{str(message.from_user.id)}")
-        info["group_pic"] = pic
-        cache.jset(f"musician_{str(message.from_user.id)}", info)
-
-    await state.reset_state()
-    await message.answer(msg.done)
-
-
-async def edit_desc(message: types.Message, state: FSMContext):
-    '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
-    db.set_group_description(str(message.from_user.id), message.text)
-
-    '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
-    info = cache.jget(f"musician_{str(message.from_user.id)}")
-    info["group_description"] = message.text
-    cache.jset(f"musician_{str(message.from_user.id)}", info)
-
-    await state.reset_state()
-
-    await message.answer(msg.done)
-
-
-async def edit_leader(message: types.Message, state: FSMContext):
-    '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
-    db.set_group_leader(str(message.from_user.id), message.text)
-
-    '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
-    info = cache.jget(f"musician_{str(message.from_user.id)}")
-    info["group_leader"] = message.text
-    cache.jset(f"musician_{str(message.from_user.id)}", info)
-    await state.reset_state()
-    await message.answer(msg.done)
-
-
-async def edit_genres(message: types.Message, state: FSMContext):
-    '''–ó–∞–ø–∏—Å—å –≤ –±–¥'''
-    genres = message.text.lower()
-    genres = genres.split(',')
-    final_gen = [x.capitalize() for x in genres]
-    db.set_group_genre(str(message.from_user.id), final_gen)
-
-    print(final_gen)
-    '''–ó–∞–ø–∏—Å—å –≤ –∫—ç—à'''
-    info = cache.jget(f"musician_{str(message.from_user.id)}")
-    info["group_genre"] = final_gen
-    cache.jset(f"musician_{str(message.from_user.id)}", info)
-    await state.reset_state()
-    await message.answer(msg.done)
-
-
-async def songs(message: types.Message):
-    '''–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞'''
-    await message.answer("‚ö†Ô∏è–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ö†Ô∏è")
-
-
-async def subscription(message: types.Message):
-    subscribed = db.get_subscription(str(message.from_user.id))
-    if subscribed is not None and db.get_musician(str(message.from_user.id))["active_subscription"]:
-        time = 90 - subscribed.days
-        await message.answer(
-            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â—ë {time} –¥–Ω–µ–π. –ß–µ—Ä–µ–∑ {time} –¥–Ω–µ–π –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—à–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –ø–ª–∞—Ç—É",
-            reply_markup=s.CAN_KB)
-    elif not db.get_musician(str(message.from_user.id))["active_subscription"]:
-        await message.answer(
-            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∫–∞",
-            reply_markup=s.SUB_KB)
-    else:
-        await message.answer(
-            f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É",
-            reply_markup=s.FREE_KB)
-
-
-async def cancel_subscription(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É üò™")
-    db.cancel_subscription(str(call.from_user.id))
-
-
-async def activate_free_subscription(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer("–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É üòé")
-    db.activate_subscription(str(call.from_user.id))
-
-
-async def activate_subscription(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer("–í—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É üòé")
-    db.activate_subscription(str(call.from_user.id))
-
-
-async def whaat(message: types.Message):
-    await message.answer("–õ–æ—Ö")
-
-
-async def whaat_mus(message: types.Message):
-    await message.answer("–ú—É–∑—ã–∫–∞–Ω—Ç")
-
-
-def use_buttons(dp: Dispatcher):
-    dp.register_message_handler(answer_qr, filters.Text(contains="QR"))
-    dp.register_message_handler(set_mus_location, is_musician=True, content_types=types.ContentTypes.LOCATION,
-                                state="*")
-    dp.register_message_handler(return_fav, filters.Text(contains="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"), state="*")
-    dp.register_message_handler(edit_group, filters.Text(contains="–ü—Ä–æ—Ñ–∏–ª—å"), state="*")
-    dp.register_message_handler(songs, filters.Text(contains="–ü–µ—Å–Ω–∏"), state="*")
-    dp.register_message_handler(subscription, filters.Text(contains="–ü–æ–¥–ø–∏—Å–∫–∞"), state="*")
-    dp.register_callback_query_handler(group_info, info_callback.filter(), state="*")
-    '''–†–∞–∑–¥–µ–ª —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º'''
-    dp.register_callback_query_handler(add_to_favourite, add_callback.filter(), state="*")
-    dp.register_callback_query_handler(delete_from_fav, delete_callback.filter(), state="*")
-    '''–î–æ–Ω–∞—Ç—ã&–ü–æ–¥–ø–∏—Å–∫–∞'''
-    dp.register_callback_query_handler(donate, lambda call: call.data and call.data == 'donate', state="*")
-    dp.register_callback_query_handler(cancel_subscription,
-                                       lambda call: call.data and call.data == 'cancel_subscription',
-                                       state="*")
-    dp.register_callback_query_handler(activate_free_subscription,
-                                       lambda call: call.data and call.data == 'free',
-                                       state="*")
-    dp.register_callback_query_handler(activate_subscription,
-                                       lambda call: call.data and call.data == 'activate_subscription',
-                                       state="*")
-
-    dp.register_callback_query_handler(back_form_fav, lambda call: call.data and call.data == 'back', state="*")
-    dp.register_callback_query_handler(return_fav_groups, lambda call: call.data and call.data == 'back_to_fav',
-                                       state="*")
-
-    '''–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –≥—Ä—É–ø–ø—ã'''
-    dp.register_callback_query_handler(set_edit_name, lambda call: call.data and call.data == 'edit_name', state="*")
-    dp.register_callback_query_handler(set_edit_desc, lambda call: call.data and call.data == 'edit_description',
-                                       state="*")
-    dp.register_callback_query_handler(set_edit_pic, lambda call: call.data and call.data == 'edit_picture', state="*")
-    dp.register_callback_query_handler(set_edit_leader, lambda call: call.data and call.data == 'edit_leader',
-                                       state="*")
-    dp.register_callback_query_handler(set_edit_genres, lambda call: call.data and call.data == 'edit_genres',
-                                       state="*")
-
-    dp.register_message_handler(edit_name, state=EditingProfile.EditingName)
-    dp.register_message_handler(edit_desc, state=EditingProfile.EditingDesc)
-    dp.register_message_handler(edit_pic, state=EditingProfile.EditingPic,
-                                content_types=types.ContentTypes.PHOTO | types.ContentTypes.DOCUMENT)
-    dp.register_message_handler(edit_leader, state=EditingProfile.EditingLeader)
-    dp.register_message_handler(edit_genres, state=EditingProfile.EditingGenres)
-
-    dp.register_callback_query_handler(fav_group_info, fav_callback.filter(), state="*")
-
-    '''–¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä'''
-    # dp.register_message_handler(whaat_mus, is_musician=True, content_types=types.ContentTypes.LOCATION, state="*")
-    # dp.register_message_handler(whaat, content_types=types.ContentTypes.LOCATION, state="*")
-
Index: streetband/.idea/.gitignore
===================================================================
diff --git a/streetband/.idea/.gitignore b/streetband/.idea/.gitignore
deleted file mode 100644
--- a/streetband/.idea/.gitignore	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
-# Editor-based HTTP Client requests
-/httpRequests/
Index: streetband/app/service.py
===================================================================
diff --git a/streetband/app/service.py b/streetband/app/service.py
deleted file mode 100644
--- a/streetband/app/service.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,402 +0,0 @@
-from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
-    InlineKeyboardMarkup, InlineKeyboardButton
-from typing import Union
-from PIL import Image, ImageDraw
-import qrcode
-from qrcode.image.styledpil import StyledPilImage
-from qrcode.image.styles.moduledrawers import RoundedModuleDrawer
-from qrcode.image.styles.colormasks import VerticalGradiantColorMask
-from streetband.app.callback_datas import groups_callback, user_reg_callback, choice_callback, action_callback, \
-    info_callback, add_callback, delete_callback, review_callback
-from streetband.app.dialogs import msg
-from streetband.config import GENRES
-from streetband.database import cache, database
-
-MAIN_KB = ReplyKeyboardMarkup(
-    resize_keyboard=True,
-    row_width=2,
-    keyboard=[
-        [
-            KeyboardButton(msg.favourite),
-            KeyboardButton(msg.fav_genres),
-        ],
-        [
-            KeyboardButton(msg.nearby)
-        ]
-    ]
-)
-
-DONATE_KB = InlineKeyboardMarkup(
-    inline_keyboard=[
-        [
-            InlineKeyboardButton(
-                text=msg.donate,
-                callback_data="donate"
-            )
-        ]
-    ]
-)
-
-CHOICE_KB = InlineKeyboardMarkup(
-    inline_keyboard=[
-        [
-            InlineKeyboardButton(
-                text="–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
-                callback_data=user_reg_callback.new(user="musician")
-            ),
-            InlineKeyboardButton(
-                text="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
-                callback_data=user_reg_callback.new(user="user")
-            )
-        ]
-    ]
-)
-
-AGREEMENT_KB = InlineKeyboardMarkup(
-    inline_keyboard=[
-        [
-            InlineKeyboardButton(
-                text="‚úÖ",
-                callback_data=choice_callback.new(decision="agree")
-            )
-        ]
-    ]
-)
-
-BACK_OR_CANCEL_KB = InlineKeyboardMarkup(
-    inline_keyboard=[
-        [
-            InlineKeyboardButton(
-                text="–í–µ—Ä–Ω—É—Ç—å—Å—è",
-                callback_data=action_callback.new(action="back", id="1")
-            )
-        ],
-        [
-            InlineKeyboardButton(
-                text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã",
-                callback_data=action_callback.new(action="exit", id="1")
-            )
-        ]
-    ]
-)
-
-BACK_OR_APPROVE_KB = InlineKeyboardMarkup(
-    inline_keyboard=[
-        [
-            InlineKeyboardButton(
-                text="–í–µ—Ä–Ω—É—Ç—å—Å—è",
-                callback_data=action_callback.new(action="back", id="1")
-            )
-        ],
-        [
-            InlineKeyboardButton(
-                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
-                callback_data=action_callback.new(action="approve", id="1")
-            )
-        ]
-    ]
-)
-
-
-def create_group_caption_kb(artist_id, number):
-    GROUP_CAPTIONS_KB = InlineKeyboardMarkup(
-        row_width=2,
-        inline_keyboard=[
-            [
-                InlineKeyboardButton(
-                    text=msg.info_mus,
-                    callback_data=info_callback.new(id=artist_id, db_number=number)
-                )
-            ],
-            [
-                InlineKeyboardButton(
-                    text=msg.donate,
-                    callback_data="donate"
-                )
-            ],
-            [
-                InlineKeyboardButton(
-                    text="–ù–∞–∑–∞–¥",
-                    callback_data=groups_callback.new(location="back")
-                )
-            ]
-        ]
-    )
-    return GROUP_CAPTIONS_KB
-
-
-EDIT_PROFILE_KB = InlineKeyboardMarkup(inline_keyboard=[
-    [
-        InlineKeyboardButton(
-            text="üìù–ù–∞–∑–≤–∞–Ω–∏–µ",
-            callback_data="edit_name"
-        ),
-        InlineKeyboardButton(
-            text="üìù–û–ø–∏—Å–∞–Ω–∏–µ",
-            callback_data="edit_description"
-        )
-    ],
-    [
-        InlineKeyboardButton(
-            text="üìù–§–æ—Ç–æ",
-            callback_data="edit_picture"
-        ),
-        InlineKeyboardButton(
-            text="üìù–õ–∏–¥–µ—Ä",
-            callback_data="edit_leader"
-        )
-    ],
-    [
-        InlineKeyboardButton(
-            text="üìù–ñ–∞–Ω—Ä—ã",
-            callback_data="edit_genres"
-        )
-    ]
-]
-)
-
-
-def create_group_action_kb(artist_id, number, fav=False, location=True):
-    if not fav:
-        GROUP_CAPTIONS_KB = InlineKeyboardMarkup(
-            row_width=2,
-            inline_keyboard=[
-                [
-                    InlineKeyboardButton(
-                        text=msg.add_musician,
-                        callback_data=add_callback.new(id=artist_id, db_number=number)
-                    )
-                ],
-                [
-                    InlineKeyboardButton(
-                        text=msg.donate,
-                        callback_data="donate"
-                    )
-                ],
-                [
-                    InlineKeyboardButton(
-                        text="–ù–∞–∑–∞–¥",
-                        callback_data=groups_callback.new(location="back")
-                    )
-                ]
-            ]
-        )
-    elif location:
-        GROUP_CAPTIONS_KB = InlineKeyboardMarkup(
-            row_width=2,
-            inline_keyboard=[
-                [
-                    InlineKeyboardButton(
-                        text=msg.delete_musician,
-                        callback_data=delete_callback.new(id=artist_id)
-                    )
-                ],
-                [
-                    InlineKeyboardButton(
-                        text=msg.donate,
-                        callback_data="donate"
-                    )
-                ],
-                [
-                    InlineKeyboardButton(
-                        text="–ù–∞–∑–∞–¥",
-                        callback_data=groups_callback.new(location="back")
-                    )
-                ]
-            ]
-        )
-    else:
-        GROUP_CAPTIONS_KB = InlineKeyboardMarkup(
-            row_width=2,
-            inline_keyboard=[
-                [
-                    InlineKeyboardButton(
-                        text=msg.delete_musician,
-                        callback_data=delete_callback.new(id=artist_id)
-                    )
-                ],
-                [
-                    InlineKeyboardButton(
-                        text=msg.donate,
-                        callback_data="donate"
-                    )
-                ],
-                [
-                    InlineKeyboardButton(
-                        text="–ù–∞–∑–∞–¥",
-                        callback_data="back_to_fav"
-                    )
-                ]
-            ]
-        )
-    return GROUP_CAPTIONS_KB
-
-
-def create_approvement_kb(message: Union[str, int]):
-    DECLINE_OR_APPROVE = InlineKeyboardMarkup(
-        inline_keyboard=[
-            [
-                InlineKeyboardButton(
-                    text="‚úÖ",
-                    callback_data=action_callback.new(action="approve_data", id=message)
-                )
-            ],
-            [
-                InlineKeyboardButton(
-                    text="‚ùå",
-                    callback_data=action_callback.new(action="decline_data", id=message)
-                )
-            ]
-        ]
-    )
-    return DECLINE_OR_APPROVE
-
-
-def create_final_approvement_kb(message: Union[str, int]):
-    DECLINE_OR_APPROVE = InlineKeyboardMarkup(
-        inline_keyboard=[
-            [
-                InlineKeyboardButton(
-                    text="‚úÖ",
-                    callback_data=action_callback.new(action="approve_final_data", id=message)
-                )
-            ],
-            [
-                InlineKeyboardButton(
-                    text="‚ùå",
-                    callback_data=action_callback.new(action="decline_final_data", id=message)
-                )
-            ]
-        ]
-    )
-    return DECLINE_OR_APPROVE
-
-
-MEM_KB = InlineKeyboardMarkup().row(InlineKeyboardButton(msg.finish, callback_data="finish"))
-
-CAN_KB = InlineKeyboardMarkup().row(InlineKeyboardButton(msg.subscription_con, callback_data="cancel_subscription"))
-SUB_KB = InlineKeyboardMarkup().row(InlineKeyboardButton(msg.subscription_ref, callback_data="activate_subscription"))
-
-FREE_KB = InlineKeyboardMarkup().row(InlineKeyboardButton("üòé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="free"))
-
-# –ü—Ä–æ—Ñ–∏–ª—å –º—É–∑—ã–∫–∞–Ω—Ç–∞
-MUSICIAN_LC_KB = ReplyKeyboardMarkup(
-    resize_keyboard=True,
-    row_width=2,
-    keyboard=[
-        [
-            KeyboardButton(text=msg.play_local, request_location=True),
-            KeyboardButton(msg.songs)
-        ],
-        [
-            KeyboardButton(msg.qr),
-            KeyboardButton(msg.subscription)
-        ],
-        [
-            KeyboardButton(msg.lc_mus)
-        ]
-    ]
-)
-
-
-async def get_genre_ids(user_id: str) -> list:
-    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç id –∂–∞–Ω—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
-    genres = cache.lrange(f"{user_id}", 0, -1)
-    if not genres:
-        if cache.jget(f"{user_id}_gen") != "editing":
-            try:
-                genres = database.get_user(user_id)["fav_genres"]
-            except TypeError:
-                return []
-        if genres is not None:
-            [cache.lpush(f"{user_id}", ge_id) for ge_id in genres]
-        else:
-            return []
-    return genres
-
-
-CONFIG_KB = InlineKeyboardMarkup().row(
-    InlineKeyboardButton(msg.btn_back, callback_data='main_window'),
-    InlineKeyboardButton(msg.config_btn_edit, callback_data='edit_config#')
-).add(InlineKeyboardButton(msg.config_btn_delete, callback_data='delete_config'))
-
-
-def genres_kb(active_genres: list, offset: int = 0):
-    kb = InlineKeyboardMarkup()
-    genres_keys = list(GENRES.keys())[0 + offset:5 + offset]
-    for genres_id in genres_keys:
-        if genres_id in active_genres:
-            kb.add(InlineKeyboardButton(
-                f"{'‚úÖ'} {GENRES[genres_id]}",
-                callback_data=f'del_ge_#{offset}#{genres_id}'
-            ))
-        else:
-            kb.add(InlineKeyboardButton(
-                GENRES[genres_id],
-                callback_data=f'add_ge_#{offset}#{genres_id}'
-            ))
-    kb.row(
-        InlineKeyboardButton(
-            msg.btn_back if offset else msg.btn_go,
-            callback_data="edit_config#0" if offset else "edit_config#5"),
-        InlineKeyboardButton(msg.btn_save, callback_data="save_config")
-    )
-    return kb
-
-
-async def get_genres_names(ids: list, sep: bool = True) -> str:
-    genres_text = ""
-    if sep:
-        for i, genre_id in enumerate(ids, start=1):
-            if i != 1:
-                genres_text += '\n'
-            genres_text += msg.genre_row.format(
-                i=i,
-                name=GENRES.get(genre_id, '-')
-            )
-    else:
-        for i, genre_id in enumerate(ids, start=1):
-            if i != 1:
-                genres_text += ','
-            genres_text += msg.genre_rows.format(i=GENRES.get(genre_id, '-'))
-    return genres_text
-
-
-def update_genres(user_id: str, data: str):
-    genre_id = data.split("#")[-1]  # data ~ add_league_#5#345
-    if data.startswith("add"):
-        cache.lpush(f"{user_id}", genre_id)
-    else:
-        cache.lrem(f"{user_id}", 0, genre_id)
-
-
-def create_qr(musician_id):
-    data = "https://t.me/streetband_bot?start=mus_" + musician_id
-    Logo_link = 'logo.png'
-
-    logo = Image.open(Logo_link)
-    basewidth = 100
-    draw = ImageDraw.Draw(logo)
-
-    # adjust image size
-    wpercent = (basewidth / float(logo.size[0]))
-    hsize = int((float(logo.size[1]) * float(wpercent)))
-    logo = logo.resize((basewidth, hsize), Image.ANTIALIAS)
-    # mus_qr = musician_id + ".png"
-    qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_H)
-    qr.add_data(data)
-
-    img = qr.make_image(image_factory=StyledPilImage, module_drawer=RoundedModuleDrawer(radius_ratio=0.5),
-                        color_mask=VerticalGradiantColorMask(bottom_color=(192, 0, 32)))
-    pos = ((img.size[0] - logo.size[0]) // 2,
-           (img.size[1] - logo.size[1]) // 2)
-    img.paste(logo, pos, logo)
-    return img
-
-
-def review_kb():
-    kb = InlineKeyboardMarkup(row_width=5)
-    buf = []
-    for i in range(1, 6):
-        kb.insert(InlineKeyboardButton(f"‚≠êÔ∏è{i}", callback_data=review_callback.new(score=str(i))))
-    return kb
Index: streetband/data/locations.py
===================================================================
diff --git a/streetband/data/locations.py b/streetband/data/locations.py
deleted file mode 100644
--- a/streetband/data/locations.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,36 +0,0 @@
-artists = [
-    ("AC/DC", {
-        "lat": 55.751663,
-        "lon": 37.618327,
-
-    }, {"genre": "—Ö–∞—Ä–¥-—Ä–æ–∫, —Ä–æ–∫-–Ω-—Ä–æ–ª–ª, –±–ª—é–∑-—Ä–æ–∫"},
-     {
-         "artist_id": "12345"
-     }),
-    ("Rolling Stones", {
-        "lat": 55.754096,
-        "lon": 37.649247,
-
-    },
-     {
-         "genre": "—Ä–æ–∫-–Ω-—Ä–æ–ª–ª, –±–ª—é–∑-—Ä–æ–∫, –ø—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∏–π —Ä–æ–∫, –†–∏—Ç–º-—ç–Ω–¥-–±–ª—é–∑"},
-     {
-         "artist_id": "12346"
-     }),
-    ("The Animals", {
-        "lat": 55.667418,
-        "lon": 37.302826,
-    }, {"genre": "–±–ª—é–∑-—Ä–æ–∫, –†–∏—Ç–º-—ç–Ω–¥-–±–ª—é–∑, –ø—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∏–π —Ä–æ–∫, —Ä–æ–∫-–Ω-—Ä–æ–ª–ª"},
-     {
-         "artist_id": "12347"
-     }
-     ),
-    ("–ö–∏–®", {
-        "lat": 55.677402,
-        "lon": 37.414903,
-    }, {"genre": "—Ö–æ—Ä—Ä–æ—Ä-–ø–∞–Ω–∫, –ø–∞–Ω–∫-—Ä–æ–∫, —Ñ–æ–ª–∫-–ø–∞–Ω–∫"},
-     {
-         "artist_id": "12348"
-     }),
-
-]
Index: streetband/.idea/modules.xml
===================================================================
diff --git a/streetband/.idea/modules.xml b/streetband/.idea/modules.xml
deleted file mode 100644
--- a/streetband/.idea/modules.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/streetband.iml" filepath="$PROJECT_DIR$/.idea/streetband.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: streetband/.idea/vcs.xml
===================================================================
diff --git a/streetband/.idea/vcs.xml b/streetband/.idea/vcs.xml
deleted file mode 100644
--- a/streetband/.idea/vcs.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: streetband/app/streets_handlers.py
===================================================================
diff --git a/streetband/app/streets_handlers.py b/streetband/app/streets_handlers.py
deleted file mode 100644
--- a/streetband/app/streets_handlers.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,134 +0,0 @@
-from aiogram import types, Dispatcher
-from aiogram.dispatcher import filters, FSMContext
-from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
-
-from streetband.app import service as s
-from streetband.app.calculate_distance import choose_shortest, calc_distance
-from streetband.app.callback_datas import groups_callback, location_callback, info_callback
-from streetband.app.dialogs import msg
-from streetband.app.states import ChoosingMusician
-from streetband.database import database as db, cache
-
-location_kb = InlineKeyboardMarkup([])
-
-
-async def show_musiacians(message: types.Message, state: FSMContext):
-    await message.answer(text=msg.send_location)
-    await state.set_state(ChoosingMusician.Choosing_musician)
-
-
-async def get_location(message: types.Message):
-    print("OK")
-    if location_kb == InlineKeyboardMarkup([]):
-        pass
-    else:
-        location_kb.inline_keyboard.clear()
-
-    location = message.location
-    coordinates = {"latitude": location["latitude"], "longitude": location["longitude"]}
-    cache.jset(f"{str(message.from_user.id)}_loc", coordinates)
-
-    closest_musicians = choose_shortest(location)
-    flag = closest_musicians[1]
-    closest_musicians = closest_musicians[0]
-    inc = 0
-    counter = 0
-    for artist_name, distance, artist_id in closest_musicians:
-        if counter < flag:
-            text = f"{artist_name} –≤ {distance} –º. –æ—Ç –≤–∞—Å"
-        else:
-            text = f"{artist_name} –≤ {distance} –∫–º. –æ—Ç –≤–∞—Å"
-        location_kb.row(
-            InlineKeyboardButton(text=text, callback_data=location_callback.new(location=inc,
-                                                                                artist_id=artist_id)))
-        inc += 1
-        counter += 1
-    await message.answer(text="–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤", reply_markup=location_kb)
-
-
-async def get_group(call: CallbackQuery, callback_data: dict):
-    await call.answer()
-
-    counter = 0
-    groups = cache.jget("musicians")
-    for i in groups:
-        if i["musician_id"] == callback_data["artist_id"]:
-            break
-        counter += 1
-    group = groups[counter]
-    artist_id = group["musician_id"]
-    artist_name = group["musician_name"]
-    artist_location = group["current_location"]
-    artist_genre = group["group_genre"]
-    if artist_location is not None:
-        await call.message.answer_venue(latitude=artist_location["latitude"], longitude=artist_location["longitude"],
-                                        title=artist_name,
-                                        address="–∂–∞–Ω—Ä: " + await s.get_genres_names(artist_genre, False),
-                                        foursquare_type="arts_entertainment/default",
-                                        reply_markup=s.create_group_caption_kb(artist_id, counter))
-    else:
-        arctic = {"latitude": -79.474655, "longitude": 29.507431}
-        await call.message.answer_venue(latitude=arctic["latitude"], longitude=arctic["longitude"],
-                                        title=artist_name,
-                                        address="–∂–∞–Ω—Ä: " + await s.get_genres_names(artist_genre, False, ),
-                                        foursquare_type="arts_entertainment/default",
-                                        reply_markup=s.create_group_caption_kb(artist_id, counter))
-
-
-async def rephresh_nearby_groups(message: types.Message):
-    location = message.location
-    coordinates = {"latitude": location["latitude"], "longitude": location["longitude"]}
-    cache_cor: dict = cache.jget(f"{str(message.from_user.id)}_loc")
-    # print(coordinates)
-    # print(cache_cor)
-    delta_dist = calc_distance(coordinates["latitude"], coordinates["longitude"], cache_cor["latitude"], cache_cor["longitude"])
-    print(delta_dist)
-    if float(delta_dist) > 500:
-        cache.jset(f"{str(message.from_user.id)}_loc", coordinates)
-        if location_kb == InlineKeyboardMarkup([]):
-            pass
-        else:
-            location_kb.inline_keyboard.clear()
-
-        location = message.location
-        closest_musicians = choose_shortest(location)
-
-        print(closest_musicians)
-
-        flag = closest_musicians[1]
-
-        closest_musicians = closest_musicians[0]
-        inc = 0
-        counter = 0
-        for artist_name, distance, artist_id in closest_musicians:
-            if counter < flag:
-                text = f"{artist_name} –≤ {distance} –º. –æ—Ç –≤–∞—Å"
-            else:
-                text = f"{artist_name} –≤ {distance} –∫–º. –æ—Ç –≤–∞—Å"
-            location_kb.row(
-                InlineKeyboardButton(text=text, callback_data=location_callback.new(location=inc,
-                                                                                    artist_id=artist_id)))
-            inc += 1
-            counter += 1
-        await message.answer(text="–í—ã –ø—Ä–æ—à–ª–∏ 500–º! –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤", reply_markup=location_kb)
-
-
-async def show_groups(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    if not location_kb["inline_keyboard"]:
-        await state.set_state(ChoosingMusician.Choosing_musician)
-        await call.message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
-    else:
-        await call.message.answer(text="–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤", reply_markup=location_kb)
-
-
-def check_streets(dp: Dispatcher):
-    dp.register_message_handler(show_musiacians, filters.Text(contains="–ú—É–∑—ã–∫–∞–Ω—Ç—ã"), state="*")
-    dp.register_message_handler(get_location,
-                                content_types=types.ContentTypes.LOCATION, state=ChoosingMusician.Choosing_musician)
-    dp.register_edited_message_handler(rephresh_nearby_groups,
-                                       content_types=types.ContentTypes.LOCATION,
-                                       state=ChoosingMusician.Choosing_musician)
-    dp.register_callback_query_handler(get_group, location_callback.filter(), state=ChoosingMusician.Choosing_musician)
-    dp.register_callback_query_handler(show_groups, groups_callback.filter(location="back"),
-                                       state=ChoosingMusician.Choosing_musician)
Index: streetband/database.py
===================================================================
diff --git a/streetband/database.py b/streetband/database.py
deleted file mode 100644
--- a/streetband/database.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,144 +0,0 @@
-import datetime
-
-import pymongo
-from loguru import logger
-from typing import Dict, List, Union
-import redis
-import ujson
-
-from streetband import config
-
-
-class Cache(redis.StrictRedis):
-    def __init__(self, host, charset="utf-8", decode_responses=True):
-        super(Cache, self).__init__(host,
-                                    charset=charset,
-                                    decode_responses=decode_responses)
-        logger.info("Redis start")
-
-    def jset(self, name, value, ex=3600):
-        """—Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç python-–æ–±—ä–µ–∫—Ç –≤ Json –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç"""
-        return self.setex(name, ex, ujson.dumps(value))
-
-    def jget(self, name):
-        """—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Json –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ python-–æ–±—ä–µ–∫—Ç"""
-        r = self.get(name)
-        if r is None:
-            return r
-        return ujson.loads(r)
-
-
-class Database:
-    """ –ö–ª–∞—Å—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö """
-
-    def __init__(self, name):
-        self.name = name
-        # self._conn = self.connection()
-        self.client = pymongo.MongoClient()
-        self.db = self.client.Street
-        logger.info("Database connection established")
-        self.musicians = self.db.musicians
-        self.users = self.db.users
-
-    def user_exists(self, user_id: str) -> bool:
-        return not (self.users.find_one({"user_id": user_id}) is None)
-
-    def musician_exists(self, user_id: str) -> bool:
-        return not (self.musicians.find_one({"musician_id": user_id}) is None)
-
-    def add_user(self, user_id: str, name=None, language="ru"):
-        if not self.user_exists(user_id):
-            n_user = {"user_id": user_id, "musician": False, "fav_genres": [], "fav_groups": [], "city": None,
-                      "pending": {}}
-            self.users.insert_one(n_user)
-
-    def add_musician(self, user_id: str):
-        if not self.musician_exists(user_id):
-            n_musician = {"musician_id": user_id, 'musician_name': None, "group_pic": None,
-                          'group_genre': [], "group_description": None, "group_leader": None, "current_location": None,
-                          'subscription': None, 'free_subscription': None, 'active_subscription': None, 'songs': []}
-            self.musicians.insert_one(n_musician)
-
-            if not self.user_exists(user_id):
-                self.add_user(user_id)
-
-            self.users.update_one({"user_id": user_id}, {"$set": {'musician': True}})
-
-            # {'group_name': '–ö–µ–∫',
-            # 'group_requisites': '4276 6600 3705 5514',
-            # 'group_pic': 'AgACAgIAAxkDAAIF5mH1MMAf1G9P_mwRyk5avg34Kmq5AAIutzEbibypSx8OsdsjZRVeAQADAgADeQADIwQ',
-            # 'group_genre': –∂–∞–Ω—Ä—ã
-            # 'group_description': '–ú–æ–º',
-            # 'group_leader': '@DeadGleb'
-
-    def set_m_name(self, user_id: str, musician_name: str):
-        self.musicians.update_one({"musician_id": user_id}, {"$set": {"musician_name": musician_name}})
-
-    def set_group_pic(self, user_id: str, group_pic: str):
-        self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_pic": group_pic}})
-
-    def set_group_description(self, user_id: str, group_description: str):
-        self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_description": group_description}})
-
-    def set_group_leader(self, user_id: str, group_leader: str):
-        self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_leader": group_leader}})
-
-    def set_group_genre(self, user_id: str, genres: List[str]):
-        genres_id = []
-        for genre in genres:
-            for k, v in config.GENRES.items():
-                if v == genre:
-                    genres_id.append(k)
-        self.musicians.update_one({"musician_id": user_id}, {"$set": {"group_genre": genres_id}})
-
-    def set_group_current_location(self, user_id: str, location: Union[Dict, None]):
-        self.musicians.update_one({"musician_id": user_id}, {"$set": {"current_location": location}})
-
-    def get_musician(self, user_id: str) -> Dict:
-        return self.musicians.find_one({"musician_id": user_id}, projection={"_id": False})
-
-    def get_musicians(self):
-        buffer = list(self.musicians.find(projection={"_id": False}))
-        if cache.jget("musicians") != buffer:
-            cache.jset("musicians", buffer)
-
-    def get_user(self, user_id: str) -> Dict:
-        return self.users.find_one({"user_id": user_id})
-
-    def is_musician(self, user_id: str) -> bool:
-        return self.users.find_one({"user_id": user_id})["musician"]
-
-    def to_fav(self, user_id: str, musician_id: str):
-        c_user = self.get_user(user_id)
-        if musician_id not in c_user["fav_groups"]:
-            update = self.users.update_one({"user_id": user_id}, {"$push": {"fav_groups": musician_id}})
-            c_user_pending = c_user["pending"]
-            c_mus = self.get_musician(musician_id)
-            m_genres = c_mus["group_genre"]
-            for i in m_genres:
-                if i not in c_user["fav_genres"]:
-                    try:
-                        c_user_pending[i] += 1
-                    except KeyError:
-                        c_user_pending[i] = 1
-                    if c_user_pending[i] == config.PENDING_APPROVAL:
-                        self.users.update_one({"user_id": user_id}, {"$push": {"fav_genres": i}})
-                        c_user_pending.pop(i, None)
-            self.users.update_one({"user_id": user_id}, {"$set": {"pending": c_user_pending}})
-
-    def from_fav(self, user_id: str, musician_id: str):
-        self.users.update_one({"user_id": user_id}, {"$pull": {"fav_groups": musician_id}})
-
-    def delete_users(self, user_id: str):
-        if self.user_exists(user_id):
-            self.users.delete_one({"user_id": user_id})
-
-    def delete_musician(self, user_id: str):
-        if self.musician_exists(user_id):
-            self.musicians.delete_one({"musician_id": user_id})
-
-
-cache = Cache(
-    host=config.REDIS_HOST,
-)
-database = Database("Street")
Index: streetband/requirements.txt
===================================================================
diff --git a/streetband/requirements.txt b/streetband/requirements.txt
deleted file mode 100644
--- a/streetband/requirements.txt	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,8 +0,0 @@
-aiogram~=2.14.3
-loguru==0.6.0
-data~=0.4
-pymongo~=4.0.1
-aioredis==2.0.1
-ujson~=5.1.0
-qrcode==7.3.1
-Pillow==9.0.1
\ No newline at end of file
Index: streetband/app/registration_handlers.py
===================================================================
diff --git a/streetband/app/registration_handlers.py b/streetband/app/registration_handlers.py
deleted file mode 100644
--- a/streetband/app/registration_handlers.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,217 +0,0 @@
-from io import BytesIO
-
-from aiogram import Dispatcher, types, Bot
-from aiogram.dispatcher import FSMContext
-from aiogram.types import Message, CallbackQuery, InputFile
-
-from streetband.database import database as db
-from streetband.app import service as s
-from streetband.app.callback_datas import user_reg_callback, choice_callback, action_callback
-from streetband.app.dialogs import msg
-from streetband.app.states import RegistrationMusician, RegistrationUser
-
-
-async def register_musician(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer(msg.policy, reply_markup=s.AGREEMENT_KB)
-    await RegistrationMusician.first()
-
-
-async def musician_agreed_policy(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer(msg.name)
-    await RegistrationMusician.next()
-
-
-async def user_agreed_policy(call: CallbackQuery, state: FSMContext):
-    if not db.user_exists(str(call.from_user.id)):
-        db.add_user(str(call.from_user.id), call.from_user.username, call.from_user.language_code)
-    await call.answer()
-    await call.message.answer(msg.reg_complete, reply_markup=s.MAIN_KB)
-    await state.reset_state()
-
-
-async def exit_reg(call: CallbackQuery, state: FSMContext):
-    await call.answer()
-    await call.message.answer(text=msg.exit,
-                              reply_markup=s.CHOICE_KB)
-    await state.reset_state()
-
-
-async def back(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
-    await RegistrationMusician.previous()
-
-
-async def get_name(message: types.Message, state: FSMContext):
-    name = message.text
-    await state.update_data(group_name=name)
-    await message.answer(msg.requisites, reply_markup=s.BACK_OR_CANCEL_KB)
-    await RegistrationMusician.next()
-
-
-async def get_requisites(message: types.Message, state: FSMContext):
-    requisites = message.text
-    await state.update_data(group_requisites=requisites)
-    await message.answer(msg.picture, reply_markup=s.BACK_OR_CANCEL_KB)
-    await RegistrationMusician.next()
-
-
-async def get_pic(message: types.Message, state: FSMContext):
-    if message.document:
-        pic_io = BytesIO()
-        await message.document.download(destination=pic_io)
-        await state.update_data(group_pic=InputFile(pic_io))
-    else:
-        pic = message.photo[-1].file_id
-        await state.update_data(group_pic=pic)
-    await message.answer(msg.genres, reply_markup=s.BACK_OR_CANCEL_KB)
-    await RegistrationMusician.next()
-
-
-async def get_genres(message: types.Message, state: FSMContext):
-    genres = message.text.lower()
-    await state.update_data(group_genres=genres)
-    await message.answer(msg.description, reply_markup=s.BACK_OR_CANCEL_KB)
-    await RegistrationMusician.next()
-
-
-async def get_desc(message: types.Message, state: FSMContext):
-    description = message.text
-    current_info = await state.get_data()
-    await state.update_data(group_description=description)
-    if message.from_user.username is None:
-        leader = message.from_user.first_name
-    else:
-        leader = message.from_user.username
-    await state.update_data(group_leader=leader)
-    name = current_info.get('group_name')
-    requisites = current_info.get('group_requisites')
-    genres = current_info.get('group_genres')
-    data = "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {}\n–ñ–∞–Ω—Ä—ã: {}\n–û–ø–∏—Å–∞–Ω–∏–µ: {}".format(name, requisites, genres,
-                                                                                description)
-    reg_data = await message.answer_photo(photo=current_info.get('group_pic'), caption=data,
-                                          reply_markup=s.BACK_OR_APPROVE_KB)
-    await state.update_data(group_pic=reg_data.photo[-1].file_id)
-    await RegistrationMusician.next()
-
-
-async def register_musician_info(call: CallbackQuery, state: FSMContext):
-    current_info = await state.get_data()
-    name = current_info.get('group_name')
-    photo = current_info.get('group_pic')
-    requisites = current_info.get('group_requisites')
-    genres = current_info.get('group_genres')
-    description = current_info.get('group_description')
-    await call.answer()
-    creator_username = current_info.get('group_leader')
-    userid = call.from_user.id
-    await call.message.answer(
-        "–°–ø–∞—Å–∏–±–æ {}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –ø—Ä–∏—à–ª—ë–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–≥–æ–≤–æ—Ä".format(
-            call.from_user.first_name))
-    await call.bot.send_photo(chat_id=-1001374281612, photo=photo,
-                              caption="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {}\n–ñ–∞–Ω—Ä—ã: {}\n–û–ø–∏—Å–∞–Ω–∏–µ: {}\nUsername: {}\nUser_id: {}".format(
-                                  name,
-                                  requisites,
-                                  genres,
-                                  description,
-                                  creator_username,
-                                  userid),
-                              reply_markup=s.create_approvement_kb(message=call.from_user.id))
-
-
-async def send_approved_data(call: CallbackQuery, callback_data: dict, state: FSMContext):
-    await call.answer()
-    await call.bot.send_document(chat_id=callback_data["id"], document=InputFile("app/kxm.docx"),
-                                 caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ! –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ "
-                                         "–¥–æ–≥–æ–≤–æ—Ä –∏ –æ—Ç–ø—Ä–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
-    await state.storage.set_state(chat=callback_data["id"], user=callback_data["id"],
-                                  state=RegistrationMusician.Uploading_agreement)
-    await call.message.delete()
-
-
-async def send_declined_data(call: CallbackQuery, callback_data: dict, state: FSMContext):
-    await call.answer()
-    await call.bot.send_message(chat_id=callback_data["id"],
-                                text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ! –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω "
-                                     "—Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏. –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤–≤–µ—Å—Ç–∏ "
-                                     "–ø–æ–≤—Ç–æ—Ä–Ω–æ")
-    # state.(Dispatcher, chat=callback_data["id"], user=callback_data["id"])
-    await state.storage.reset_state(chat=callback_data["id"], user=callback_data["id"])
-    await call.message.delete()
-
-
-async def get_agreement(message: types.Message, state: FSMContext):
-    agreement_doc = message.document.file_id
-    current_info = await state.get_data()
-    await message.answer(msg.riba)
-    await message.bot.send_document(chat_id=-1001374281612, document=agreement_doc,
-                                    reply_markup=s.create_final_approvement_kb(message=message.from_user.id))
-    await RegistrationMusician.next()
-
-
-async def send_approved_data_fin(call: CallbackQuery, callback_data: dict):
-    await call.answer()
-    await call.message.delete()
-    await call.bot.send_message(chat_id=callback_data["id"],
-                                text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ! –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—à—É –±–∞–∑—É ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å "
-                                     "–≤—Å–µ–º –∏–∑ —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
-                                reply_markup=s.MEM_KB)
-
-
-async def register_musician_final(call: CallbackQuery, state: FSMContext):
-    current_info = await state.get_data()
-    muser_id = str(call.from_user.id)
-    db.add_musician(muser_id)
-    db.set_m_name(muser_id, str(current_info['group_name']))
-    db.set_group_pic(muser_id, str(current_info['group_pic']))
-    db.set_group_description(muser_id, str(current_info['group_description']))
-    db.set_group_leader(muser_id, str(current_info['group_leader']))
-    db.set_group_genre(muser_id, current_info['group_genres'].capitalize().split(','))
-    db.set_group_current_location(muser_id, None)
-    db.free_subscription(muser_id)
-    db.get_musicians()
-    await call.answer()
-    await call.bot.send_message(chat_id=call.from_user.id,
-                                text="–ù–∏–∂–µ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
-                                reply_markup=s.MUSICIAN_LC_KB)
-    await state.reset_state(with_data=True)
-    print(await state.get_state())
-
-
-async def register_user(call: CallbackQuery):
-    await call.answer()
-    await call.message.answer(msg.policy, reply_markup=s.AGREEMENT_KB)
-    await RegistrationUser.first()
-
-
-def register_users(dp: Dispatcher):
-    dp.register_callback_query_handler(register_musician, user_reg_callback.filter(user="musician"))
-    dp.register_callback_query_handler(musician_agreed_policy, choice_callback.filter(decision="agree"),
-                                       state=RegistrationMusician.Agreeing_terms)
-    dp.register_callback_query_handler(user_agreed_policy, choice_callback.filter(decision="agree"),
-                                       state=RegistrationUser.Agreeing_terms)
-    dp.register_callback_query_handler(exit_reg, action_callback.filter(action="exit"), state='*')
-    dp.register_callback_query_handler(back, action_callback.filter(action="back"), state='*')
-
-    dp.register_message_handler(get_name, state=RegistrationMusician.Group_name)
-    dp.register_message_handler(get_requisites, state=RegistrationMusician.Requisites)
-    dp.register_message_handler(get_pic, state=RegistrationMusician.Group_pic,
-                                content_types=types.ContentTypes.PHOTO | types.ContentTypes.DOCUMENT)
-    dp.register_message_handler(get_genres, state=RegistrationMusician.Group_genres)
-    dp.register_message_handler(get_desc, state=RegistrationMusician.Group_desc)
-
-    dp.register_callback_query_handler(register_musician_info, action_callback.filter(action="approve"),
-                                       state=RegistrationMusician.Waiting_first_approve)
-    dp.register_callback_query_handler(send_approved_data, action_callback.filter(action="approve_data"),
-                                       state="*")
-    dp.register_callback_query_handler(send_declined_data, action_callback.filter(action="decline_data"),
-                                       state="*")
-    dp.register_message_handler(get_agreement, state=RegistrationMusician.Uploading_agreement,
-                                content_types=types.ContentTypes.DOCUMENT)
-    dp.register_callback_query_handler(send_approved_data_fin, action_callback.filter(action="approve_final_data"),
-                                       state="*")
-    dp.register_callback_query_handler(register_musician_final, lambda call: call.data and call.data == 'finish',
-                                       state=RegistrationMusician.Waiting_final_approve)
-    dp.register_callback_query_handler(register_user, user_reg_callback.filter(user="user"))
Index: streetband/.idea/inspectionProfiles/Project_Default.xml
===================================================================
diff --git a/streetband/.idea/inspectionProfiles/Project_Default.xml b/streetband/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
--- a/streetband/.idea/inspectionProfiles/Project_Default.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,26 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
-    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <value>
-          <list size="5">
-            <item index="0" class="java.lang.String" itemvalue="aiohttp" />
-            <item index="1" class="java.lang.String" itemvalue="aiogram" />
-            <item index="2" class="java.lang.String" itemvalue="tortoise-orm" />
-            <item index="3" class="java.lang.String" itemvalue="python-Levenshtein" />
-            <item index="4" class="java.lang.String" itemvalue="requests" />
-          </list>
-        </value>
-      </option>
-    </inspection_tool>
-    <inspection_tool class="PyPep8NamingInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <option name="ignoredErrors">
-        <list>
-          <option value="N802" />
-        </list>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
Index: streetband/app/states.py
===================================================================
diff --git a/streetband/app/states.py b/streetband/app/states.py
deleted file mode 100644
--- a/streetband/app/states.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,33 +0,0 @@
-from aiogram.dispatcher.filters.state import StatesGroup, State
-
-
-class RegistrationUser(StatesGroup):
-    Agreeing_terms = State()
-
-
-class RegistrationMusician(StatesGroup):
-    Agreeing_terms = State()
-    Group_name = State()
-    Requisites = State()
-    Group_pic = State()
-    Group_genres = State()
-    Group_desc = State()
-    Waiting_first_approve = State()
-    Uploading_agreement = State()
-    Waiting_final_approve = State()
-
-
-class ChoosingMusician(StatesGroup):
-    Choosing_musician = State()
-
-
-class EditingProfile(StatesGroup):
-    EditingName = State()
-    EditingPic = State()
-    EditingDesc = State()
-    EditingLeader = State()
-    EditingGenres = State()
-
-
-class Feedback(StatesGroup):
-    Reviewing = State()
Index: README.md
===================================================================
diff --git a/README.md b/README.md
deleted file mode 100644
--- a/README.md	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,2 +0,0 @@
-# streetband
-
Index: streetband/app/musician.py
===================================================================
diff --git a/streetband/app/musician.py b/streetband/app/musician.py
deleted file mode 100644
--- a/streetband/app/musician.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,23 +0,0 @@
-import typing
-
-from aiogram.dispatcher.filters import BoundFilter
-
-from streetband.database import cache
-
-
-class MusicianFilter(BoundFilter):
-    key = 'is_musician'
-
-    def __init__(self, is_musician: typing.Optional[bool] = None):
-        self.is_musician = is_musician
-
-    async def check(self, obj):
-        # print(obj)
-        if self.is_musician is None:
-            return False
-        musicians = cache.jget("musicians")
-        ids = []
-        for musician in musicians:
-            ids.append(int(musician["musician_id"]))
-        return obj.from_user.id in ids
-
Index: streetband/main.py
===================================================================
diff --git a/streetband/main.py b/streetband/main.py
deleted file mode 100644
--- a/streetband/main.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,74 +0,0 @@
-import asyncio
-
-from aiogram import executor, Bot, Dispatcher
-from aiogram.contrib.fsm_storage.redis import RedisStorage2
-from aiogram.types import Update, BotCommand, BotCommandScopeDefault
-import logging
-
-from streetband import config
-from streetband.app.button_handlers import use_buttons
-from streetband.app.feedback_handlers import send_feedback
-from streetband.app.genres_handlers import choose_genres
-from streetband.app.musician import MusicianFilter
-from streetband.app.registration_handlers import register_users
-from streetband.app.start_handlers import start_bot
-from streetband.app.streets_handlers import check_streets
-
-logger = logging.getLogger(__name__)
-
-
-def register_all_filters(dp):
-    dp.filters_factory.bind(MusicianFilter)
-
-
-def register_all_handlers(dp):
-    start_bot(dp)
-    register_users(dp)
-    choose_genres(dp)
-    use_buttons(dp)
-    check_streets(dp)
-    send_feedback(dp)
-
-async def set_bot_commands(bot: Bot):
-    data = [
-        (
-            [
-                BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
-                BotCommand(command="feedback", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ")
-            ],
-            BotCommandScopeDefault(),
-            None
-        )
-    ]
-    for commands_list, commands_scope, language in data:
-        await bot.set_my_commands(commands=commands_list, scope=commands_scope, language_code=language)
-
-
-async def main():
-    logging.basicConfig(
-        level=logging.INFO,
-        format=u'%(filename)s:%(lineno)d #%(levelname)-8s [%(asctime)s] - %(name)s - %(message)s',
-    )
-    logger.info("Starting bot")
-    bot = Bot(token=config.TOKEN, parse_mode="HTML")
-    dp = Dispatcher(bot, storage=RedisStorage2(config.REDIS_HOST))
-
-    await set_bot_commands(bot)
-
-    register_all_filters(dp)
-    register_all_handlers(dp)
-
-    try:
-        await dp.start_polling()
-    finally:
-        await dp.storage.close()
-        print(dp.storage)
-        await dp.storage.wait_closed()
-        await bot.session.close()
-
-
-if __name__ == '__main__':
-    try:
-        asyncio.run(main())
-    except (KeyboardInterrupt, SystemExit):
-        logger.error("Bot stopped!")
Index: streetband/.idea/streetband.iml
===================================================================
diff --git a/streetband/.idea/streetband.iml b/streetband/.idea/streetband.iml
deleted file mode 100644
--- a/streetband/.idea/streetband.iml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.9" jdkType="Python SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: streetband/app/feedback_handlers.py
===================================================================
diff --git a/streetband/app/feedback_handlers.py b/streetband/app/feedback_handlers.py
deleted file mode 100644
--- a/streetband/app/feedback_handlers.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,32 +0,0 @@
-from aiogram import Dispatcher, types
-from aiogram.dispatcher import FSMContext
-from aiogram.types import CallbackQuery
-
-from streetband.app import service as s
-from streetband.app.callback_datas import review_callback
-from streetband.app.states import Feedback
-
-
-async def feedback(message: types.Message, state: FSMContext):
-    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –±–∞–≥–∏ ("
-                         "—Å—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ) –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ "
-                         "—Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤–∞–º –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π —Å–º–∞–π–ª–∏–∫")
-    await state.set_state(Feedback.Reviewing)
-
-
-async def review(message: types.Message):
-    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤. –û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∑–≤—ë–∑–¥–æ—á–∫–∏ —Å —Ü–∏—Ñ–∏—Ä–∫–∞–º–∏ –æ—Ç 1 –¥–æ 5",
-                         reply_markup=s.review_kb())
-
-
-async def thanks(call: CallbackQuery, callback_data: dict, state: FSMContext):
-    await call.answer()
-    await call.message.answer("–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –æ—Ç–∑—ã–≤! –°–ø–∞—Å–∏–±–æ üëç")
-    print(callback_data)
-    await state.reset_state(with_data=True)
-
-
-def send_feedback(dp: Dispatcher):
-    dp.register_message_handler(feedback, commands=['feedback'])
-    dp.register_message_handler(review, state=Feedback.Reviewing)
-    dp.register_callback_query_handler(thanks, review_callback.filter(), state=Feedback.Reviewing)
Index: streetband/app/start_handlers.py
===================================================================
diff --git a/streetband/app/start_handlers.py b/streetband/app/start_handlers.py
deleted file mode 100644
--- a/streetband/app/start_handlers.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,50 +0,0 @@
-import re
-
-from aiogram import Dispatcher, types
-from aiogram.dispatcher import filters, FSMContext
-from aiogram.types import InputFile
-
-from streetband.app.dialogs import msg
-from streetband.database import database as db
-from streetband.app import service as s
-
-
-async def start_qr(message: types.Message):
-    # –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–± –ø–æ –µ–≥–æ user_id –∏ –¥–æ–±–∞–≤–ª—è–µ–º user_name
-    user_name = message.from_user.first_name
-    language = message.from_user.language_code
-    if not db.user_exists(message.from_user.id):
-        user = db.add_user(str(message.from_user.id), user_name, language)
-    musician = db.get_musician(str(message.text.split()[-1][4::]))
-    print(musician)
-    print(message.text.split()[-1][4::])
-    info = []
-
-    genre = "üé∏–ñ–∞–Ω—Ä:" + await s.get_genres_names(musician["group_genre"], False)
-    info.append(genre)
-    desc = "üìù–û–ø–∏—Å–∞–Ω–∏–µ:" + musician["group_description"]
-    info.append(desc)
-    leader = "ü§¥–õ–∏–¥–µ—Ä: " + musician["group_leader"]
-    info.append(leader)
-
-    caption = "\n".join(info)
-    await message.answer_photo(photo=musician["group_pic"], caption=caption, reply_markup=s.DONATE_KB)
-    await message.answer(msg.wellcome, reply_markup=s.MAIN_KB)
-
-
-async def start_normal(message: types.Message, state: FSMContext):
-    await state.reset_state()
-    temp = await message.answer(text="–º", reply_markup=types.ReplyKeyboardRemove())
-    await temp.delete()
-    user_id = str(message.from_user.id)
-    if db.user_exists(user_id) and (not db.get_user(user_id)["musician"]):
-        await message.answer(msg.wellcome, reply_markup=s.MAIN_KB)
-    elif db.user_exists(user_id) and (db.get_user(user_id)["musician"]):
-        await message.answer(msg.wellcome, reply_markup=s.MUSICIAN_LC_KB)
-    else:
-        await message.answer(msg.choice, reply_markup=s.CHOICE_KB)
-
-
-def start_bot(dp: Dispatcher):
-    dp.register_message_handler(start_qr, filters.CommandStart(deep_link=re.compile("mus_[0-9]{9}")))
-    dp.register_message_handler(start_normal, filters.CommandStart(), state="*")
Index: streetband/.idea/inspectionProfiles/profiles_settings.xml
===================================================================
diff --git a/streetband/.idea/inspectionProfiles/profiles_settings.xml b/streetband/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
--- a/streetband/.idea/inspectionProfiles/profiles_settings.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
Index: streetband/.idea/misc.xml
===================================================================
diff --git a/streetband/.idea/misc.xml b/streetband/.idea/misc.xml
deleted file mode 100644
--- a/streetband/.idea/misc.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
Index: streetband/app/dialogs.py
===================================================================
diff --git a/streetband/app/dialogs.py b/streetband/app/dialogs.py
deleted file mode 100644
--- a/streetband/app/dialogs.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,67 +0,0 @@
-from dataclasses import dataclass
-
-
-@dataclass(frozen=True)
-class Messages():
-    genre_row: str = "{i}. {name}"
-    genre_rows: str = "{i}"
-    greeting: str = "–•—ç–ª–ª–æ—É üòé ! \n "
-    config: str = "–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω—ã:\n{genres}"
-    greeting_musician: str = "–•—ç–ª–ª–æ—É üòé ! –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –º—É–∑—ã–∫–∏ –≤ —ç—Ç–∏ —Å–µ—Ä—ã–µ –±—É–¥–Ω–∏"
-    greeting_user: str = "–•—ç–ª–ª–æ—É üòé ! \n –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞"
-    text_placeholder: str = "‚è≥–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: 1973 \n" \
-                            "üé∏–ñ–∞–Ω—Ä: —Ö–∞—Ä–¥-—Ä–æ–∫\n" \
-                            "ü§¥–°–æ—Å—Ç–∞–≤: –ú–∞–ª–∫–æ–ª–º –Ø–Ω–≥, –ê–Ω–≥—É—Å –Ø–Ω–≥, –ë–æ–Ω –°–∫–æ—Ç—Ç, –ö–ª–∏—Ñ—Ñ –£–∏–ª—å—è–º—Å, –§–∏–ª –†—É–¥–¥"
-    send_location: str = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º—É–∑—ã–∫–∞–Ω—Ç–∞—Ö –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç " \
-                         "–≤–æ –≤—Ä–µ–º–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à—É live –ª–æ–∫–∞—Ü–∏—é.\n" \
-                         "–ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —É–≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—â–∏—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ã—á–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
-    online: str = "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"
-    donate: str = "üíµ –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å"
-    set_genres: str = "–í—ã–±–µ—Ä–∏ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã.\n–í—ã–±—Ä–∞–Ω—ã:\n{genres}"
-    donate_fun: str = "–ó–∞–ø–ª–∞—Ç–∏—Ç—å –≤–µ–¥—å–º–∞–∫—É —á–µ–∫–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–æ–π"
-    nearby: str = "üìç –ú—É–∑—ã–∫–∞–Ω—Ç—ã —Ä—è–¥–æ–º"
-    lc: str = "üë® –ü—Ä–æ—Ñ–∏–ª—å"
-    favourite: str = "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
-    btn_back: str = "<- –ù–∞–∑–∞–¥"
-    btn_go: str = "–í–ø–µ—Ä–µ–¥ ->"
-    btn_save: str = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
-    config_btn_edit: str = "–ò–∑–º–µ–Ω–∏—Ç—å"
-    config_btn_delete: str = "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
-    data_delete: str = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
-    choice: str = "–í—ã–±–µ—Ä–∏—Ç–µ:"
-    policy: str = "–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º"
-    add_musician: str = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
-    delete_musician: str = "üíî –£–¥–∞–ª–∏—Ç—å"
-    name_lc: str = "–ù–∏–∫–Ω–µ–π–º"
-    name: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ –≤ —Å–æ–ª–æ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –∏–º—è)"
-    requisites: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –¥–æ–Ω–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
-    picture: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ –≤ —Å–æ–ª–æ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ)"
-    genres: str = "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –°–µ–π—á–∞—Å –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ä–æ–∫, –¥–∂–∞–∑, —Ä—ç–ø, –ø–æ–ø, –∫–ª–∞—Å—Å–∏–∫–∞, –Ω–∞—Ä–æ–¥–Ω–æ–µ, –∫–∞–Ω—Ç—Ä–∏"
-    description: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
-    riba: str = "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ–≥–æ–≤–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –ø—Ä–æ–±–Ω—ã–π –ø–ª–∞—Ç—ë–∂ (–≤ —Ä–∞–∑–º–µ—Ä–µ 1 ‚ÇΩ) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
-    exit: str = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã ! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?"
-    lc_mus: str = "üï∫ –ü—Ä–æ—Ñ–∏–ª—å –≥—Ä—É–ø–ø—ã"
-    info_mus: str = "üï∫ –û –≥—Ä—É–ø–ø–µ"
-    fav_genres: str = "‚ù§Ô∏è‚Äçüî•–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã"
-    finish: str = "Let`s rocküòé!"
-    play_local: str = "üó∫–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
-    songs: str = "üé∏ –ü–µ—Å–Ω–∏"
-    balance: str = "üíµ –ë–∞–ª–∞–Ω—Å"
-    bonuses: str = "üéÅ –ë–æ–Ω—É—Å—ã"
-    reg_complete: str = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∞! Let`s rocküòé!"
-    wellcome: str = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! Let`s rocküòé!"
-    save: str = "–ò–∑–º–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
-    no_genres: str = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!"
-    qr: str = "üîÅ QR-–∫–æ–¥"
-    edit_name: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
-    edit_pic: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"
-    edit_desc: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
-    edit_leader: str = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–∞ (–µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ –∑–Ω–∞–∫–∞ @)"
-    cb_not_saved: str = "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞!"
-    done: str = "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
-    subscription: str = "‚úâÔ∏è–ü–æ–¥–ø–∏—Å–∫–∞"
-    subscription_con: str = "üòØ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
-    subscription_ref: str = "üòé –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
-
-
-msg = Messages()
Index: streetband/app/genres_handlers.py
===================================================================
diff --git a/streetband/app/genres_handlers.py b/streetband/app/genres_handlers.py
deleted file mode 100644
--- a/streetband/app/genres_handlers.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,103 +0,0 @@
-import asyncio
-
-from aiogram import Dispatcher, types
-from aiogram.types import CallbackQuery
-
-from streetband.app import service as s
-from streetband.app.dialogs import msg
-from streetband.config import YEAR
-from streetband.database import cache, database as db, database
-
-
-async def get_config(message: types.Message):
-    user_genre_ids = await s.get_genre_ids(str(message.from_user.id))
-    print(user_genre_ids)
-    if user_genre_ids:
-        cache.setex(f"last_msg_{message.from_user.id}", YEAR, message.message_id + 2)
-        genres = await s.get_genres_names(user_genre_ids)
-        await message.answer(msg.config.format(genres=genres),
-                             reply_markup=s.CONFIG_KB)
-    else:
-        cache.setex(f"last_msg_{message.from_user.id}", YEAR, message.message_id + 1)
-        await message.answer(
-            msg.no_genres,
-            reply_markup=s.genres_kb(database.get_user(str(message.from_user.id))["fav_genres"])
-        )
-
-
-async def delete_config(call: CallbackQuery):
-    genres_list = await s.get_genre_ids(str(call.from_user.id))
-    cache.delete(f"{call.from_user.id}")
-    database.delete_genres(str(call.from_user.id))
-    await call.answer()
-    cache.incr(f"last_msg_{call.from_user.id}")
-    await call.bot.send_message(call.from_user.id,
-                                msg.data_delete,
-                                reply_markup=s.MAIN_KB)
-    cache.delete(f"{str(call.from_user.id)}_gen")
-
-
-async def set_or_update_config(call: CallbackQuery, offset=""):
-    user_id = str(call.from_user.id)
-    if cache.jget(f"{user_id}_gen") is None:
-        cache.jset(f"{user_id}_gen", "editing")
-
-    genres_ids = await s.get_genre_ids(user_id)
-    genres = await s.get_genres_names(genres_ids)
-
-    # –µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
-    if offset == "":
-        if (call.data.split("#")[-1] == "0") or (call.data.split("#")[-1] == "5"):
-            await set_or_update_config(call, offset=call.data.split("#")[-1])
-        else:
-            await call.message.answer(
-                msg.set_genres.format(genres=genres),
-                reply_markup=s.genres_kb(genres_ids)
-            )
-    else:
-        await call.message.edit_text(
-            msg.set_genres.format(genres=genres)
-        )
-        await call.message.edit_reply_markup(
-            reply_markup=s.genres_kb(genres_ids, int(offset))
-        )
-    await call.answer()
-
-
-async def update_genres_info(call: CallbackQuery):
-    offset = call.data.split("#")[-2]
-    s.update_genres(call.from_user.id, call.data)
-    await set_or_update_config(call, offset=offset)
-    await call.answer()
-
-
-async def save_config(call: CallbackQuery):
-    genres_list = await s.get_genre_ids(call.from_user.id)
-    if genres_list:
-        db.add_genre(
-            str(call.from_user.id),
-            genres_list
-        )
-        await call.answer()
-        await call.bot.send_message(
-            call.from_user.id,
-            msg.save,
-            reply_markup=s.MAIN_KB
-        )
-    else:
-        # –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
-        await call.answer()
-        no_genres = await call.message.answer(msg.cb_not_saved)
-        await asyncio.sleep(3)
-        await no_genres.delete()
-    cache.delete(f"{str(call.from_user.id)}_gen")
-
-
-def choose_genres(dp: Dispatcher):
-    dp.register_message_handler(get_config, lambda message: message.text == msg.fav_genres, state="*")
-    dp.register_callback_query_handler(delete_config, lambda call: call.data == 'delete_config', state="*")
-    dp.register_callback_query_handler(set_or_update_config, lambda call: call.data.startswith('edit_config'),
-                                       state="*")
-    dp.register_callback_query_handler(update_genres_info, lambda call: call.data[:6] in ['del_ge', 'add_ge'],
-                                       state="*")
-    dp.register_callback_query_handler(save_config, lambda call: call.data == 'save_config', state="*")
Index: streetband/config.py
===================================================================
diff --git a/streetband/config.py b/streetband/config.py
deleted file mode 100644
--- a/streetband/config.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,19 +0,0 @@
-TOKEN = "1974455256:AAGFash6uGmsdKqDUWs85Fqj1hvI5DwGAv0"
-VERSION = 0.1
-
-REDIS_HOST = 'localhost'
-
-MINUTE = 60
-YEAR = 60*60*24*366
-
-GENRES = {
-    "1": "–†–æ–∫",
-    "2": "–î–∂–∞–∑",
-    "3": "–†—ç–ø",
-    "4": "–ü–æ–ø",
-    "5": "–ö–ª–∞—Å—Å–∏–∫–∞",
-    "6": "–ù–∞—Ä–æ–¥–Ω–æ–µ",
-    "7": "–ö–∞–Ω—Ç—Ä–∏"
-}
-
-PENDING_APPROVAL = 3
\ No newline at end of file
Index: streetband/app/show_on_map.py
===================================================================
diff --git a/streetband/app/show_on_map.py b/streetband/app/show_on_map.py
deleted file mode 100644
--- a/streetband/app/show_on_map.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,5 +0,0 @@
-URL = "http://maps.google.com/maps?q={lat},{lon}"
-
-
-def show(lat, lon):
-    return URL.format(lat=lat, lon=lon)
\ No newline at end of file
Index: streetband/app/calculate_distance.py
===================================================================
diff --git a/streetband/app/calculate_distance.py b/streetband/app/calculate_distance.py
deleted file mode 100644
--- a/streetband/app/calculate_distance.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,54 +0,0 @@
-from math import radians, cos, sin, asin, sqrt, ceil
-
-from aiogram import types
-
-from streetband.app.show_on_map import show
-from streetband.database import database as db, cache
-
-R = 6378.1
-
-
-def calc_distance(lat1, lon1, lat2, lon2):
-    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
-    # haversine formula
-    dlon = lon2 - lon1
-    dlat = lat2 - lat1
-    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
-    c = 2 * asin(sqrt(a))
-    # Radius of earth in kilometers is 6371
-    km = 6371 * c
-    if km < 1:
-        return str(km * 1000)[:5]
-    return ceil(km)
-
-
-def choose_shortest(location: types.Location):
-    distances = []
-    db.get_musicians()
-    musicians = cache.jget("musicians")
-
-    for musician in musicians:
-        artist_id = musician["musician_id"]
-        artist_name = musician["musician_name"]
-        artist_location = musician["current_location"]
-        if artist_location is not None:
-            distances.append((artist_name,
-                              calc_distance(location.latitude, location.longitude,
-                                            artist_location["latitude"], artist_location["longitude"]),
-                              artist_id
-                              ))
-        else:
-            # –µ—Å–ª–∏ –±—É–¥–µ—Ç –º–∞–ª–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
-            arctic = {"latitude": -79.474655, "longitude": 29.507431}
-            distances.append((artist_name,
-                              calc_distance(location.latitude, location.longitude,
-                                            arctic["latitude"], arctic["longitude"]),
-                              artist_id
-                              ))
-    meters = [i for i in distances if type(i[1]) == str]
-    meters = sorted(meters, key=lambda x: float(x[1]))
-    km = [i for i in distances if type(i[1]) == int]
-    km = sorted(km, key=lambda x: x[1])
-    distances = meters + km
-
-    return distances, len(meters)
Index: streetband/app/callback_datas.py
===================================================================
diff --git a/streetband/app/callback_datas.py b/streetband/app/callback_datas.py
deleted file mode 100644
--- a/streetband/app/callback_datas.py	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ /dev/null	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
@@ -1,12 +0,0 @@
-from aiogram.utils.callback_data import CallbackData
-
-location_callback = CallbackData("find", "location", "artist_id")
-user_reg_callback = CallbackData("reg", "user")
-choice_callback = CallbackData("choose", "decision")
-action_callback = CallbackData("cur", "action", "id")
-groups_callback = CallbackData("group", "location")
-info_callback = CallbackData("info", "id", "db_number")
-add_callback = CallbackData("add", "id", "db_number")
-delete_callback = CallbackData("add", "id")
-fav_callback = CallbackData("fav", "id")
-review_callback = CallbackData("review", "score")
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (streetband)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ b/.idea/misc.xml	(date 1640352101207)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (streetband)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ b/.idea/vcs.xml	(date 1646154183868)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.idea/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ b/.gitignore	(date 1646145040059)
@@ -1,1 +1,2 @@
 .idea/
+redis
Index: .idea/streetband.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9 (streetband)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/streetband.iml b/.idea/streetband.iml
--- a/.idea/streetband.iml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ b/.idea/streetband.iml	(date 1640352101259)
@@ -1,14 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/venv" />
-    </content>
-    <orderEntry type="jdk" jdkName="Python 3.9 (streetband)" jdkType="Python SDK" />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.9" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
-  <component name="PyDocumentationSettings">
-    <option name="format" value="PLAIN" />
-    <option name="myDocStringFormat" value="Plain" />
-  </component>
 </module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Default ignored files\r\n/shelf/\r\n/workspace.xml\r\n# Editor-based HTTP Client requests\r\n/httpRequests/\r\n# Datasource local storage ignored files\r\n/dataSources/\r\n/dataSources.local.xml\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
--- a/.idea/.gitignore	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ b/.idea/.gitignore	(date 1640352101181)
@@ -1,8 +1,8 @@
 # Default ignored files
 /shelf/
 /workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
 # Datasource local storage ignored files
 /dataSources/
 /dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\r\n  <profile version=\"1.0\">\r\n    <option name=\"myName\" value=\"Project Default\" />\r\n    <inspection_tool class=\"PyPep8NamingInspection\" enabled=\"true\" level=\"WEAK WARNING\" enabled_by_default=\"true\">\r\n      <option name=\"ignoredErrors\">\r\n        <list>\r\n          <option value=\"N802\" />\r\n        </list>\r\n      </option>\r\n    </inspection_tool>\r\n    <inspection_tool class=\"PyUnresolvedReferencesInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\r\n      <option name=\"ignoredIdentifiers\">\r\n        <list>\r\n          <option value=\"database.Dict\" />\r\n        </list>\r\n      </option>\r\n    </inspection_tool>\r\n  </profile>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision 903815be4c22637e4027e2eb83b4245c2afd4a30)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1640352101357)
@@ -1,17 +1,24 @@
 <component name="InspectionProjectProfileManager">
   <profile version="1.0">
     <option name="myName" value="Project Default" />
+    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="5">
+            <item index="0" class="java.lang.String" itemvalue="aiohttp" />
+            <item index="1" class="java.lang.String" itemvalue="aiogram" />
+            <item index="2" class="java.lang.String" itemvalue="tortoise-orm" />
+            <item index="3" class="java.lang.String" itemvalue="python-Levenshtein" />
+            <item index="4" class="java.lang.String" itemvalue="requests" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
     <inspection_tool class="PyPep8NamingInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
       <option name="ignoredErrors">
         <list>
           <option value="N802" />
-        </list>
-      </option>
-    </inspection_tool>
-    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredIdentifiers">
-        <list>
-          <option value="database.Dict" />
         </list>
       </option>
     </inspection_tool>
diff --git a/streetband/app/__init__.py b/streetband/app/__init__.py
deleted file mode 100644
diff --git a/streetband/data/__init__.py b/streetband/data/__init__.py
deleted file mode 100644
